name: release

on:
  workflow_dispatch: # allows manual invocation
  push:
    tags:
      - 'v[0-9]{4}\.[0-1]?[0-9]\.[0-9]+' # triggers on tags like vYYYY.M.# or vYYYY.MM.# (e.g. v2025.10.1, v2025.3.231, v2025.03.10)

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Install and cache JS toolchain and dependencies (node_modules)
      - name: Setup JS
        uses: ./.github/actions/js-setup

      - name: Debug Foundry
        run: anvil --version || echo "anvil not found"

      - name: Build
        run: pnpm run build-all

      - name: Typecheck
        run: pnpm run typecheck-all

      - name: Prettier
        run: pnpm run prettier-all:check

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            packages/*/dist/**
          retention-days: 1

  test-pre-prod:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Install and cache JS toolchain and dependencies (node_modules)
      - name: Setup JS
        uses: ./.github/actions/js-setup

      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: build-artifacts-${{ github.sha }}
          path: packages/

      - name: Test (preprod)
        run: anvil & pnpm run test-all && lsof -t -i tcp:8545 | xargs kill
        env:
          API_PUBLIC_KEY: ${{ secrets.PREPROD_API_PUBLIC_KEY }}
          API_PRIVATE_KEY: ${{ secrets.PREPROD_API_PRIVATE_KEY }}
          BASE_URL: ${{ secrets.PREPROD_BASE_URL }}
          ORGANIZATION_ID: ${{ secrets.PREPROD_ORGANIZATION_ID }}
          PRIVATE_KEY_ID: ${{ secrets.PREPROD_PRIVATE_KEY_ID }}
          EXPECTED_PRIVATE_KEY_ETH_ADDRESS: ${{ secrets.PREPROD_EXPECTED_PRIVATE_KEY_ETH_ADDRESS }}
          EXPECTED_PRIVATE_KEY_ETH_ADDRESS_2: ${{ secrets.PREPROD_EXPECTED_PRIVATE_KEY_ETH_ADDRESS_2 }}
          EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS: ${{ secrets.PREPROD_EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS }}
          EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS_2: ${{ secrets.PREPROD_EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS_2 }}
          BANNED_TO_ADDRESS: ${{ secrets.PREPROD_BANNED_TO_ADDRESS }}
          SOLANA_TEST_ORG_API_PRIVATE_KEY: ${{ secrets.SOLANA_TEST_ORG_API_PRIVATE_KEY }}
          WALLET_ID: ${{ secrets.PREPROD_WALLET_ID }}

  test-prod:
    runs-on: ubuntu-latest
    needs: test-pre-prod
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Install and cache JS toolchain and dependencies (node_modules)
      - name: Setup JS
        uses: ./.github/actions/js-setup

      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: build-artifacts-${{ github.sha }}
          path: packages/

      - name: Test (prod)
        run: anvil & pnpm run test-all && lsof -t -i tcp:8545 | xargs kill
        env:
          API_PUBLIC_KEY: ${{ secrets.API_PUBLIC_KEY }}
          API_PRIVATE_KEY: ${{ secrets.API_PRIVATE_KEY }}
          BASE_URL: "https://api.turnkey.com"
          ORGANIZATION_ID: ${{ secrets.ORGANIZATION_ID }}
          PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
          EXPECTED_PRIVATE_KEY_ETH_ADDRESS: ${{ secrets.EXPECTED_PRIVATE_KEY_ETH_ADDRESS }}
          EXPECTED_PRIVATE_KEY_ETH_ADDRESS_2: ${{ secrets.EXPECTED_PRIVATE_KEY_ETH_ADDRESS_2 }}
          EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS: ${{ secrets.EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS }}
          EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS_2: ${{ secrets.EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS_2 }}
          BANNED_TO_ADDRESS: "0x6F72eDB2429820c2A0606a9FC3cA364f5E9b2375"
          SOLANA_TEST_ORG_API_PRIVATE_KEY: ${{ secrets.SOLANA_TEST_ORG_API_PRIVATE_KEY }}
          WALLET_ID: ${{ secrets.WALLET_ID }}

  publish:
    runs-on: ubuntu-latest
    environment: production # require manual approval for production deployments
    needs: test-prod
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # fetch all history for changelog generation

      # Install and cache JS toolchain and dependencies (node_modules)
      - name: Setup JS
        uses: ./.github/actions/js-setup

      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: build-artifacts-${{ github.sha }}
          path: packages/

      - name: Debug npm config
        run: |
          echo "NPM_TOKEN is set: ${NPM_TOKEN:+set}"
          cat .npmrc || echo "No .npmrc found"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check for changesets
        run: |
          if [ -z "$(ls -A .changeset/*.md 2>/dev/null)" ]; then
            echo "No changesets found, exiting"
            exit 0
          fi

      - name: Configure Git User
        run: |
          git config user.name "tkhq-deploy"
          git config user.email "github@turnkey.engineering"

      - name: Version packages
        run: |
          pnpm changeset version
          pnpm run version
          git add .
          git commit -m "chore: release packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish packages to NPM and GitHub (dry run)
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN" >> .npmrc
          pnpm publish -r --dry-run --no-git-checks
          rm .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish packages to NPM
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          pnpm publish -r --no-git-checks --report-summary
          mv publish-summary.json publish-npm.txt
          cat publish-npm.txt
          rm .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish packages to GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN" > .npmrc
          pnpm publish -r --no-git-checks --report-summary
          mv publish-summary.json publish-github.txt
          cat publish-github.txt
          rm .npmrc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes to release branch
        run: |
          git checkout -b release/${{ github.ref_name }} || git checkout release/${{ github.ref_name }}
          git push origin release/${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 #v2.2.2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
