name: release

on:
  workflow_dispatch: # allows manual invocation
  pull_request: # TODO - remove once this workflow is stable
    branches:
      - main
  push:
    tags:
      - "v*.*.*" # triggers on tags like v1.0.0

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # required for git tags and history
          ref: ${{ github.event.pull_request.head.ref || github.ref }} # TODO - remove once this workflow is stable

      - name: Fetch default branch
        run: |
          git fetch origin main:main || echo "Default branch not found, continuing"

      # Install and cache JS toolchain and dependencies (node_modules)
      - name: Setup JS
        uses: ./.github/actions/js-setup
        # env:
        #   NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      # Check if there are any pending changesets
      # - name: Check for pending releases
      #   run: |
      #     echo "Checking for pending changesets..."
      #     pnpm changeset status --verbose
      #     if pnpm changeset status | grep -q "packages to be bumped:"; then
      #       echo "Changesets found, continuing"
      #     else
      #       echo "No unreleased changesets found, exiting"
      #       exit 0
      #     fi

      # TODO - remove this once the workflow is stable
      - name: Check for pending releases
        run: |
          echo "Checking for pending changesets..."
          pnpm changeset status --verbose || {
            echo "Changeset status failed, checking if default branch exists"
            if ! git rev-parse --verify main >/dev/null 2>&1; then
              echo "Default branch (main) does not exist, please configure .changeset/config.json with the correct baseBranch"
              exit 1
            fi
            exit 1
          }
          if pnpm changeset status | grep -qi "packages to be bumped"; then
            echo "Changesets found, continuing"
          else
            echo "No unreleased changesets found, exiting"
            exit 0
          fi

      - name: Debug Foundry
        run: anvil --version || echo "anvil not found"

      - name: Build
        run: pnpm run build-all

      - name: Typecheck
        run: pnpm run typecheck-all

      - name: Prettier
        run: pnpm run prettier-all:check

      # Upload the build artifacts with what is currently in main
      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            packages/*/dist/**
            packages/*/src/**
            packages/*/package.json
            pnpm-lock.yaml
            pnpm-workspace.yaml
            .changeset/**
          retention-days: 1

  version-and-rebuild:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup JS
        uses: ./.github/actions/js-setup
        # env:
        #   NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: build-artifacts-${{ github.sha }}
          path: .

      # Process changesets, update versions, and rebuild packages to include latest versions
      - name: Version and rebuild packages
        run: |
          pnpm changeset version
          pnpm run version
          pnpm install -r
          pnpm run build-all
          pnpm run typecheck-all
          pnpm run prettier-all:check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload updated release artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: release-artifacts-${{ github.sha }}
          path: |
            packages/*/dist/**
            packages/*/src/**
            packages/*/package.json
            pnpm-lock.yaml
            pnpm-workspace.yaml
            .changeset/**
          retention-days: 1

  test-pre-prod:
    runs-on: ubuntu-latest
    needs: version-and-rebuild
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # required for git tags and history

      # Install and cache JS toolchain and dependencies (node_modules)
      - name: Setup JS
        uses: ./.github/actions/js-setup
        # env:
        #   NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Download release artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: release-artifacts-${{ github.sha }}
          path: .

      - name: Install latest dependencies
        run: pnpm install -r --frozen-lockfile

      - name: Test (preprod)
        run: anvil & pnpm run test-all && lsof -t -i tcp:8545 | xargs kill
        env:
          API_PUBLIC_KEY: ${{ secrets.PREPROD_API_PUBLIC_KEY }}
          API_PRIVATE_KEY: ${{ secrets.PREPROD_API_PRIVATE_KEY }}
          BASE_URL: ${{ secrets.PREPROD_BASE_URL }}
          ORGANIZATION_ID: ${{ secrets.PREPROD_ORGANIZATION_ID }}
          PRIVATE_KEY_ID: ${{ secrets.PREPROD_PRIVATE_KEY_ID }}
          EXPECTED_PRIVATE_KEY_ETH_ADDRESS: ${{ secrets.PREPROD_EXPECTED_PRIVATE_KEY_ETH_ADDRESS }}
          EXPECTED_PRIVATE_KEY_ETH_ADDRESS_2: ${{ secrets.PREPROD_EXPECTED_PRIVATE_KEY_ETH_ADDRESS_2 }}
          EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS: ${{ secrets.PREPROD_EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS }}
          EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS_2: ${{ secrets.PREPROD_EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS_2 }}
          BANNED_TO_ADDRESS: ${{ secrets.PREPROD_BANNED_TO_ADDRESS }}
          SOLANA_TEST_ORG_API_PRIVATE_KEY: ${{ secrets.SOLANA_TEST_ORG_API_PRIVATE_KEY }}
          WALLET_ID: ${{ secrets.PREPROD_WALLET_ID }}

  test-prod:
    runs-on: ubuntu-latest
    needs: test-pre-prod
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # required for git tags and history

      # Install and cache JS toolchain and dependencies (node_modules)
      - name: Setup JS
        uses: ./.github/actions/js-setup
        # env:
        #   NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Download release artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: release-artifacts-${{ github.sha }}
          path: .

      - name: Install latest dependencies
        run: pnpm install -r --frozen-lockfile

      - name: Test (prod)
        run: anvil & pnpm run test-all && lsof -t -i tcp:8545 | xargs kill
        env:
          API_PUBLIC_KEY: ${{ secrets.API_PUBLIC_KEY }}
          API_PRIVATE_KEY: ${{ secrets.API_PRIVATE_KEY }}
          BASE_URL: "https://api.turnkey.com"
          ORGANIZATION_ID: ${{ secrets.ORGANIZATION_ID }}
          PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
          EXPECTED_PRIVATE_KEY_ETH_ADDRESS: ${{ secrets.EXPECTED_PRIVATE_KEY_ETH_ADDRESS }}
          EXPECTED_PRIVATE_KEY_ETH_ADDRESS_2: ${{ secrets.EXPECTED_PRIVATE_KEY_ETH_ADDRESS_2 }}
          EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS: ${{ secrets.EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS }}
          EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS_2: ${{ secrets.EXPECTED_WALLET_ACCOUNT_ETH_ADDRESS_2 }}
          BANNED_TO_ADDRESS: "0x6F72eDB2429820c2A0606a9FC3cA364f5E9b2375"
          SOLANA_TEST_ORG_API_PRIVATE_KEY: ${{ secrets.SOLANA_TEST_ORG_API_PRIVATE_KEY }}
          WALLET_ID: ${{ secrets.WALLET_ID }}

  prepare-release:
    runs-on: ubuntu-latest
    needs: test-prod
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup JS
        uses: ./.github/actions/js-setup
        # env:
        #   NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Download versioned artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: release-artifacts-${{ github.sha }}
          path: .

      - name: Install latest dependencies
        run: pnpm install -r --frozen-lockfile

      - name: Configure Git User
        run: |
          git config user.name "tkhq-deploy"
          git config user.email "github@turnkey.engineering"

      - name: Create and switch to release branch
        run: |
          git fetch origin
          git checkout -B release/${{ github.sha }} origin/release/${{ github.sha }} || \
          git checkout -B release/${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit versioned changes
        run: |
          git add .
          git commit -m "chore: release packages" || echo "No changes to commit"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes to release branch
        run: |
          git push origin HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 #v2.2.2
      #   with:
      #     tag_name: ${{ github.sha }}
      #     name: Release ${{ github.sha }}
      #     generate_release_notes: true
      #     draft: true
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
