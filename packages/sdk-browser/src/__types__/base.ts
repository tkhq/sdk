import type { TActivityId, TActivityStatus } from "@turnkey/http";
import type { WalletInterface, WalletStamper } from "@turnkey/wallet-stamper";
import type { SessionType } from "@turnkey/sdk-types";
import type { WebauthnStamper } from "@turnkey/webauthn-stamper";
import type { IframeStamper } from "@turnkey/iframe-stamper";
import type { IndexedDbStamper } from "@turnkey/indexed-db-stamper";

export type GrpcStatus = {
  message: string;
  code: number;
  details: unknown[] | null;
};

export enum MethodType {
  Get,
  List,
  Command,
}

/**
 * This interface defines the structure of user data that will be stored in local storage
 * when using one of the login methods.
 */
export interface User {
  // Unique identifier for the user.
  userId: string;

  // Username of the user.
  username: string;

  // Organization details associated with the user.
  organization: {
    // Unique identifier for the organization.
    organizationId: string;

    // Name of the organization.
    organizationName: string;
  };

  // Session information for the user, which can be either read-only or read-write.
  session:
    | {
        // Optional read-only session details.
        read?: ReadOnlySession;

        // Optional read-write session details.
        write?: ReadWriteSession;

        // Authenticated client associated with the session.
        authClient: AuthClient;
      }
    | undefined;
}

/**
 * Represents an expiring read-only session with a token for read-only requests.
 */
export interface ReadOnlySession {
  /**
   * This token is generated by the `createReadOnlySession` method in the `TurnkeySDKClientBase` class.
   * It is used in the `X-Session` header for read-only requests to Turnkey's API.
   *
   * @see {@link TurnkeySDKClientBase#createReadOnlySession}
   */
  token: string;

  /**
   * The expiry time of the token in seconds since the Unix epoch.
   * This indicates when the token will no longer be valid.
   */
  expiry: number;
}

/**
 * Represents an expiring read-write session with a credential bundle for read-write requests.
 */
export interface ReadWriteSession {
  /**
   * This bundle is generated by the `createReadWriteSession` and `createApiKeys` methods in the `TurnkeySDKClientBase` and `TurnkeyPasskeyClient` classes.
   * It is injected into the iFrame client to enable read and write operations.
   *
   * @see {@link TurnkeySDKClientBase#createReadWriteSession}
   * @see {@link TurnkeyPasskeyClient#createApiKeys}
   */
  credentialBundle: string;

  /**
   * The expiry time of the credential bundle in seconds since the Unix epoch.
   * This indicates when the credential bundle will no longer be valid.
   */
  expiry: number;
}

export type TStamp = {
  stampHeaderName: string;
  stampHeaderValue: string;
};

export interface TStamper {
  stamp: (input: string) => Promise<TStamp>;
}

export type THttpConfig = {
  baseUrl: string;
};

export class TurnkeyRequestError extends Error {
  details: any[] | null;
  code: number;

  constructor(input: GrpcStatus) {
    let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;

    if (input.details != null) {
      turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;
    }

    super(turnkeyErrorMessage);

    this.name = "TurnkeyRequestError";
    this.details = input.details ?? null;
    this.code = input.code;
  }
}

export interface ActivityResponse {
  activity: {
    id: TActivityId;
    status: TActivityStatus;
    result: Record<string, any>;
  };
}

export interface ActivityMetadata {
  activity: {
    id: TActivityId;
    status: TActivityStatus;
  };
}

export type TActivityPollerConfig = {
  intervalMs: number;
  numRetries: number;
};

interface BaseSDKClientConfig {
  apiBaseUrl: string;
  organizationId: string;
  activityPoller?: TActivityPollerConfig | undefined;
}

interface SDKClientConfigWithStamper extends BaseSDKClientConfig {
  stamper: TStamper;
  readOnlySession?: never;
}

interface SDKClientConfigWithReadOnlySession extends BaseSDKClientConfig {
  stamper?: never;
  readOnlySession: string;
}

export type TurnkeySDKClientConfig =
  | SDKClientConfigWithStamper
  | SDKClientConfigWithReadOnlySession;

export interface TurnkeySDKBrowserConfig {
  apiBaseUrl: string;
  defaultOrganizationId: string;
  rpId?: string;
  serverSignUrl?: string;
  iframeUrl?: string;
  dangerouslyOverrideIframeKeyTtl?: number;
}

export type Stamper =
  | WebauthnStamper
  | IframeStamper
  | WalletStamper
  | IndexedDbStamper;

export type queryOverrideParams = {
  organizationId?: string;
};

export type commandOverrideParams = {
  organizationId?: string;
  timestampMs?: string;
};

export interface IframeClientParams {
  iframeContainer: HTMLElement | null | undefined;
  iframeUrl: string;
  iframeElementId?: string;
  dangerouslyOverrideIframeKeyTtl?: number;
}

export interface PasskeyClientParams {
  rpId?: string;
  timeout?: number;
  userVerification?: UserVerificationRequirement;
  allowCredentials?: PublicKeyCredentialDescriptor[];
}

export interface RefreshSessionParams {
  sessionType: SessionType;
  expirationSeconds?: string | undefined;
  publicKey?: string;
}

export interface LoginWithBundleParams {
  bundle: string;
  expirationSeconds?: string;
}

export interface LoginWithPasskeyParams {
  sessionType: SessionType;
  expirationSeconds?: string | undefined;
  publicKey?: string;
}

export interface LoginWithWalletParams {
  sessionType: SessionType;
  expirationSeconds?: string | undefined;
  publicKey?: string;
}

export interface TurnkeyWalletClientConfig extends SDKClientConfigWithStamper {
  wallet: WalletInterface;
}

/**
 * The Client used to authenticate the user.
 */
export enum AuthClient {
  Passkey = "passkey",
  Wallet = "wallet",
  Iframe = "iframe",
  IndexedDb = "indexed-db",
}
