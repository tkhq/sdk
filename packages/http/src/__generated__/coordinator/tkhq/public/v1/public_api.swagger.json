{
  "swagger": "2.0",
  "info": {
    "title": "Turnkey Public API",
    "version": "1.0",
    "contact": {
      "name": "Turnkey Engineering",
      "url": "https://turnkey.io/contact",
      "email": "eng@turnkey.io"
    }
  },
  "tags": [
    {
      "name": "PublicApiService"
    }
  ],
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/public/v1/query/get_activity": {
      "post": {
        "summary": "Get Activity",
        "description": "Get details about an Activity",
        "operationId": "PublicApiService_GetActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetActivityRequest"
            }
          }
        ],
        "tags": ["Activities"]
      }
    },
    "/public/v1/query/get_organization": {
      "post": {
        "summary": "Get Organization",
        "description": "Get details about an Organization",
        "operationId": "PublicApiService_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/query/get_user": {
      "post": {
        "summary": "Get User",
        "description": "Get details about a User",
        "operationId": "PublicApiService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUserRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/query/list_keys": {
      "post": {
        "summary": "List Private Keys",
        "description": "List all Private Keys within an Organization",
        "operationId": "PublicApiService_GetKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetKeysResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetKeysRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/query/list_users": {
      "post": {
        "summary": "List Users",
        "description": "List all Users within an Organization",
        "operationId": "PublicApiService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUsersRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/query/whoami": {
      "post": {
        "summary": "Who am I?",
        "description": "Get basic information about your current API user and your organization",
        "operationId": "PublicApiService_GetWhoami",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWhoamiResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetWhoamiRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/submit/create_api_keys": {
      "post": {
        "summary": "Create API Keys",
        "description": "Add api keys to an existing User",
        "operationId": "PublicApiService_CreateApiKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1CreateApiKeysRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/submit/create_invitations": {
      "post": {
        "summary": "Create Invitations",
        "description": "Create Invitations to join an existing Organization",
        "operationId": "PublicApiService_CreateInvitations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1CreateInvitationsRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/submit/create_keys": {
      "post": {
        "summary": "Create Private Keys",
        "description": "Create new Private Keys",
        "operationId": "PublicApiService_CreateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1CreateKeysRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/submit/create_policy": {
      "post": {
        "summary": "Create Policy",
        "description": "Create a new Policy",
        "operationId": "PublicApiService_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1CreatePolicyRequest"
            }
          }
        ],
        "tags": ["Policies"]
      }
    },
    "/public/v1/submit/create_users": {
      "post": {
        "summary": "Create Users",
        "description": "Create new API Users",
        "operationId": "PublicApiService_CreateUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1CreateUsersRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/submit/delete_api_keys": {
      "post": {
        "summary": "Delete API Keys",
        "description": "Remove api keys from a User",
        "operationId": "PublicApiService_DeleteApiKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1DeleteApiKeysRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/submit/delete_invitations": {
      "post": {
        "summary": "Delete Invitation",
        "description": "Delete an existing Invitation",
        "operationId": "PublicApiService_DeleteInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1DeleteInvitationRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/submit/delete_policy": {
      "post": {
        "summary": "Delete Policy",
        "description": "Delete an existing Policy",
        "operationId": "PublicApiService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1DeletePolicyRequest"
            }
          }
        ],
        "tags": ["Policies"]
      }
    },
    "/public/v1/submit/delete_users": {
      "post": {
        "summary": "Delete User",
        "description": "Deactivate an existing User",
        "operationId": "PublicApiService_DeleteUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1DeleteUsersRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/submit/sign": {
      "post": {
        "summary": "Sign Message",
        "description": "Sign a message with a Private Key",
        "operationId": "PublicApiService_SignMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1SignMessageRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/submit/sign_transaction": {
      "post": {
        "summary": "Sign Transaction",
        "description": "Sign a transaction with a Private Key",
        "operationId": "PublicApiService_SignTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/publicv1SignTransactionRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/tkhq/public/v1/query/get_key": {
      "post": {
        "summary": "Get Private Key",
        "description": "Get details about a Private Key",
        "operationId": "PublicApiService_GetKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetKeyResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetKeyRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    }
  },
  "definitions": {
    "activityActivity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/activityActivityStatus"
        },
        "type": {
          "$ref": "#/definitions/activityActivityType"
        },
        "intent": {
          "$ref": "#/definitions/enforcementIntent"
        },
        "result": {
          "$ref": "#/definitions/enforcementResult"
        },
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/activityVote"
          }
        },
        "fingerprint": {
          "type": "string"
        },
        "canApprove": {
          "type": "boolean"
        },
        "canReject": {
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "organizationId",
        "status",
        "type",
        "intent",
        "result",
        "votes",
        "fingerprint",
        "canApprove",
        "canReject"
      ]
    },
    "activityActivityStatus": {
      "type": "string",
      "enum": [
        "ACTIVITY_STATUS_CREATED",
        "ACTIVITY_STATUS_PENDING",
        "ACTIVITY_STATUS_COMPLETED",
        "ACTIVITY_STATUS_FAILED",
        "ACTIVITY_STATUS_CONSENSUS_NEEDED",
        "ACTIVITY_STATUS_REJECTED"
      ]
    },
    "activityActivityType": {
      "type": "string",
      "enum": [
        "ACTIVITY_TYPE_ADD_API_KEYS",
        "ACTIVITY_TYPE_ADD_USERS",
        "ACTIVITY_TYPE_ADD_KEYS",
        "ACTIVITY_TYPE_SIGN_MESSAGE",
        "ACTIVITY_TYPE_CREATE_INVITATIONS",
        "ACTIVITY_TYPE_ACCEPT_INVITATION",
        "ACTIVITY_TYPE_ADD_POLICY",
        "ACTIVITY_TYPE_REMOVE_KEY",
        "ACTIVITY_TYPE_REMOVE_USERS",
        "ACTIVITY_TYPE_REMOVE_API_KEYS",
        "ACTIVITY_TYPE_REMOVE_INVITATION",
        "ACTIVITY_TYPE_REMOVE_ORGANIZATION",
        "ACTIVITY_TYPE_REMOVE_POLICY",
        "ACTIVITY_TYPE_ADD_TAG",
        "ACTIVITY_TYPE_REMOVE_TAGS",
        "ACTIVITY_TYPE_CREATE_ORGANIZATION",
        "ACTIVITY_TYPE_SIGN_TRANSACTION",
        "ACTIVITY_TYPE_APPROVE_ACTIVITY",
        "ACTIVITY_TYPE_REJECT_ACTIVITY",
        "ACTIVITY_TYPE_REMOVE_AUTHENTICATORS",
        "ACTIVITY_TYPE_ADD_AUTHENTICATORS"
      ],
      "title": "These are all of the types of user-facing activities on Turnkey\nWe use this to guide the polymorphic parsing of activity requests/approvals/rejections\nOne activity type maps to one internal Intent, but not all internal intents have a user-facing activity (e.g. Hearbeats)"
    },
    "activityCreateApiKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_ADD_API_KEYS"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementAddApiKeysIntent"
        }
      },
      "required": ["type", "organizationId", "intent"]
    },
    "activityCreateInvitationsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_INVITATIONS"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementCreateInvitationsIntent"
        }
      },
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activityCreateKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_ADD_KEYS"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementAddKeysIntent"
        }
      },
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activityCreatePolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_ADD_POLICY"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementAddPolicyIntent"
        }
      },
      "title": "TODO(tim) - add timestamp to all these requests to prevent replay attack in the event the DB has been tampered with",
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activityCreateUsersRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_ADD_USERS"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementAddUsersIntent"
        }
      },
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activityDeleteApiKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_REMOVE_API_KEYS"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementRemoveApiKeysIntent"
        }
      },
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activityDeleteInvitationRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_REMOVE_INVITATION"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementRemoveInvitationIntent"
        }
      },
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activityDeletePolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_REMOVE_POLICY"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementRemovePolicyIntent"
        }
      },
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activityDeleteUsersRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_REMOVE_USERS"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementRemoveUsersIntent"
        }
      },
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activitySignMessageRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_SIGN_MESSAGE"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementSignMessageIntent"
        }
      },
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activitySignTransactionRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_SIGN_TRANSACTION"]
        },
        "requestId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/enforcementSignTransactionIntent"
        }
      },
      "required": ["type", "requestId", "organizationId", "intent"]
    },
    "activityVote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/resourcesUser"
        },
        "activityId": {
          "type": "string"
        },
        "selection": {
          "type": "string",
          "enum": ["VOTE_SELECTION_APPROVED", "VOTE_SELECTION_REJECTED"]
        },
        "message": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        }
      },
      "required": [
        "id",
        "userId",
        "user",
        "activityId",
        "selection",
        "message",
        "publicKey",
        "signature",
        "scheme",
        "createdAt"
      ]
    },
    "curveCurve": {
      "type": "string",
      "enum": ["CURVE_SECP256K1", "CURVE_ED25519"],
      "title": "- CURVE_SECP256K1: The only curve we're planning to support short-term\n - CURVE_ED25519: Demonstrates an error case, we aren't going to support this curve at first"
    },
    "enforcementAcceptInvitationIntent": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "userId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "authenticator": {
          "$ref": "#/definitions/enforcementAuthenticatorParams"
        }
      },
      "required": ["invitationId", "userId", "authenticator"]
    },
    "enforcementAcceptInvitationResult": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string"
        },
        "newUserId": {
          "type": "string"
        }
      },
      "required": ["invitationId", "newUserId"]
    },
    "enforcementAddApiKeysIntent": {
      "type": "object",
      "properties": {
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enforcementApiKeyParams"
          },
          "title": "@inject_tag: validate:\"dive,required\""
        },
        "userId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["apiKeys", "userId"]
    },
    "enforcementAddApiKeysResult": {
      "type": "object",
      "properties": {
        "apiKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["apiKeyIds"]
    },
    "enforcementAddAuthenticatorsIntent": {
      "type": "object",
      "properties": {
        "authenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enforcementAuthenticatorParams"
          },
          "title": "@inject_tag: validate:\"dive,required\""
        },
        "userId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["authenticators", "userId"]
    },
    "enforcementAddAuthenticatorsResult": {
      "type": "object",
      "properties": {
        "authenticatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["authenticatorIds"]
    },
    "enforcementAddKeysIntent": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enforcementKeyParams"
          },
          "title": "@inject_tag: validate:\"dive,required\""
        }
      },
      "required": ["keys"]
    },
    "enforcementAddKeysResult": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesExternalKey"
          }
        }
      },
      "required": ["keys"]
    },
    "enforcementAddPolicyIntent": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=40\""
        },
        "selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesSelector"
          },
          "title": "@inject_tag: validate:\"required,dive,required\""
        },
        "effect": {
          "$ref": "#/definitions/policyEffect"
        },
        "notes": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=256\""
        }
      },
      "required": ["label", "selectors", "effect", "notes"]
    },
    "enforcementAddPolicyResult": {
      "type": "object",
      "properties": {
        "newPolicyId": {
          "type": "string"
        }
      },
      "required": ["newPolicyId"]
    },
    "enforcementAddTagIntent": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=20\""
        },
        "tagType": {
          "$ref": "#/definitions/resourcesTagType"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": ["label", "tagType", "resourceIds"]
    },
    "enforcementAddTagResult": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string"
        },
        "tagType": {
          "$ref": "#/definitions/resourcesTagType"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["tagId", "tagType", "resourceIds"]
    },
    "enforcementAddUsersIntent": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enforcementUserParams"
          },
          "title": "@inject_tag: validate:\"required,dive,required\""
        }
      },
      "required": ["users"]
    },
    "enforcementAddUsersResult": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["userIds"]
    },
    "enforcementApiKeyParams": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=40\""
        },
        "publicKey": {
          "type": "string",
          "title": "@inject_tag: validate:\"hexadecimal,len=66\""
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: \"required,dive,uuid\""
        }
      },
      "required": ["label", "publicKey", "tags"]
    },
    "enforcementApproveActivityIntent": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string",
          "title": "@inject_tag: validate:\"required\""
        }
      },
      "required": ["fingerprint"]
    },
    "enforcementAuthenticatorParams": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=40\""
        },
        "userId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "attestation": {
          "$ref": "#/definitions/webauthnPublicKeyCredentialWithAttestation"
        },
        "challenge": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=256\""
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: \"required,dive,uuid\""
        }
      },
      "required": ["label", "userId", "attestation", "challenge", "tags"]
    },
    "enforcementCreateInvitationsIntent": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enforcementInvitationParams"
          },
          "title": "@inject_tag: validate:\"required,dive,required\""
        }
      },
      "required": ["invitations"]
    },
    "enforcementCreateInvitationsResult": {
      "type": "object",
      "properties": {
        "invitationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["invitationIds"]
    },
    "enforcementCreateOrganizationIntent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=40\""
        },
        "rootEmail": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,email\""
        },
        "rootAuthenticator": {
          "$ref": "#/definitions/enforcementAuthenticatorParams"
        },
        "rootUserUuid": {
          "type": "string",
          "title": "@inject_tag: validate:\"uuid\""
        }
      },
      "required": ["name", "rootEmail", "rootAuthenticator"]
    },
    "enforcementCreateOrganizationResult": {
      "type": "object",
      "properties": {
        "newOrgId": {
          "type": "string"
        }
      },
      "required": ["newOrgId"]
    },
    "enforcementHeartbeatIntent": {
      "type": "object",
      "title": "TODO(tim) - is this still needed?"
    },
    "enforcementHeartbeatResult": {
      "type": "object"
    },
    "enforcementIntent": {
      "type": "object",
      "properties": {
        "createOrganizationIntent": {
          "$ref": "#/definitions/enforcementCreateOrganizationIntent"
        },
        "heartbeatIntent": {
          "$ref": "#/definitions/enforcementHeartbeatIntent"
        },
        "addAuthenticatorsIntent": {
          "$ref": "#/definitions/enforcementAddAuthenticatorsIntent"
        },
        "addUsersIntent": {
          "$ref": "#/definitions/enforcementAddUsersIntent"
        },
        "addKeysIntent": {
          "$ref": "#/definitions/enforcementAddKeysIntent"
        },
        "signMessageIntent": {
          "$ref": "#/definitions/enforcementSignMessageIntent"
        },
        "createInvitationsIntent": {
          "$ref": "#/definitions/enforcementCreateInvitationsIntent"
        },
        "acceptInvitationIntent": {
          "$ref": "#/definitions/enforcementAcceptInvitationIntent"
        },
        "addPolicyIntent": {
          "$ref": "#/definitions/enforcementAddPolicyIntent"
        },
        "removeKeyIntent": {
          "$ref": "#/definitions/enforcementRemoveKeyIntent"
        },
        "removeUsersIntent": {
          "$ref": "#/definitions/enforcementRemoveUsersIntent"
        },
        "removeAuthenticatorsIntent": {
          "$ref": "#/definitions/enforcementRemoveAuthenticatorsIntent"
        },
        "removeInvitationIntent": {
          "$ref": "#/definitions/enforcementRemoveInvitationIntent"
        },
        "removeOrganizationIntent": {
          "$ref": "#/definitions/enforcementRemoveOrganizationIntent"
        },
        "removePolicyIntent": {
          "$ref": "#/definitions/enforcementRemovePolicyIntent"
        },
        "addTagIntent": {
          "$ref": "#/definitions/enforcementAddTagIntent"
        },
        "removeTagsIntent": {
          "$ref": "#/definitions/enforcementRemoveTagsIntent"
        },
        "signTransactionIntent": {
          "$ref": "#/definitions/enforcementSignTransactionIntent"
        },
        "addApiKeysIntent": {
          "$ref": "#/definitions/enforcementAddApiKeysIntent"
        },
        "removeApiKeysIntent": {
          "$ref": "#/definitions/enforcementRemoveApiKeysIntent"
        },
        "approveActivityIntent": {
          "$ref": "#/definitions/enforcementApproveActivityIntent"
        },
        "rejectActivityIntent": {
          "$ref": "#/definitions/enforcementRejectActivityIntent"
        }
      },
      "required": ["createOrganizationIntent"]
    },
    "enforcementInvitationParams": {
      "type": "object",
      "properties": {
        "receiverAlias": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=40\""
        },
        "receiverEmail": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,email\""
        },
        "receiverTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "accessType": {
          "$ref": "#/definitions/resourcesAccessType"
        },
        "senderUserId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": [
        "receiverAlias",
        "receiverEmail",
        "receiverTags",
        "accessType",
        "senderUserId"
      ]
    },
    "enforcementKeyParams": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=40\""
        },
        "curve": {
          "$ref": "#/definitions/curveCurve"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "addressFormats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesAddressFormat"
          },
          "title": "@inject_tag: validate:\"required\""
        }
      },
      "required": ["label", "curve", "tags", "addressFormats"]
    },
    "enforcementRejectActivityIntent": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string",
          "title": "@inject_tag: validate:\"required\""
        }
      },
      "required": ["fingerprint"]
    },
    "enforcementRemoveApiKeysIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "apiKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: validate:\"required,dive,required,uuid\""
        }
      },
      "required": ["userId", "apiKeyIds"]
    },
    "enforcementRemoveApiKeysResult": {
      "type": "object",
      "properties": {
        "apiKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["apiKeyIds"]
    },
    "enforcementRemoveAuthenticatorsIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "authenticatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: validate:\"required,div,required,uuid\""
        }
      },
      "required": ["userId", "authenticatorIds"]
    },
    "enforcementRemoveAuthenticatorsResult": {
      "type": "object",
      "properties": {
        "authenticatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["authenticatorIds"]
    },
    "enforcementRemoveInvitationIntent": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["invitationId"]
    },
    "enforcementRemoveInvitationResult": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string"
        }
      },
      "required": ["invitationId"]
    },
    "enforcementRemoveKeyIntent": {
      "type": "object",
      "properties": {
        "keyId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["keyId"]
    },
    "enforcementRemoveKeyResult": {
      "type": "object",
      "properties": {
        "keyId": {
          "type": "string"
        }
      },
      "required": ["keyId"]
    },
    "enforcementRemoveOrganizationIntent": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["organizationId"]
    },
    "enforcementRemoveOrganizationResult": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        }
      },
      "required": ["organizationId"]
    },
    "enforcementRemovePolicyIntent": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        }
      },
      "required": ["policyId"]
    },
    "enforcementRemovePolicyResult": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        }
      },
      "required": ["policyId"]
    },
    "enforcementRemoveTagsIntent": {
      "type": "object",
      "properties": {
        "tagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: validate:\"required,dive,required,uuid\""
        },
        "tagType": {
          "$ref": "#/definitions/resourcesTagType"
        }
      },
      "required": ["tagIds", "tagType"]
    },
    "enforcementRemoveTagsResult": {
      "type": "object",
      "properties": {
        "tagIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tagType": {
          "$ref": "#/definitions/resourcesTagType"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["tagIds", "tagType", "resourceIds"]
    },
    "enforcementRemoveUsersIntent": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: validate:\"required,dive,required,uuid\""
        }
      },
      "required": ["userIds"]
    },
    "enforcementRemoveUsersResult": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["userIds"]
    },
    "enforcementResult": {
      "type": "object",
      "properties": {
        "createOrganizationResult": {
          "$ref": "#/definitions/enforcementCreateOrganizationResult"
        },
        "heartbeatResult": {
          "$ref": "#/definitions/enforcementHeartbeatResult"
        },
        "addAuthenticatorsResult": {
          "$ref": "#/definitions/enforcementAddAuthenticatorsResult"
        },
        "addUsersResult": {
          "$ref": "#/definitions/enforcementAddUsersResult"
        },
        "addKeysResult": {
          "$ref": "#/definitions/enforcementAddKeysResult"
        },
        "createInvitationsResult": {
          "$ref": "#/definitions/enforcementCreateInvitationsResult"
        },
        "acceptInvitationResult": {
          "$ref": "#/definitions/enforcementAcceptInvitationResult"
        },
        "signMessageResult": {
          "$ref": "#/definitions/enforcementSignMessageResult"
        },
        "addPolicyResult": {
          "$ref": "#/definitions/enforcementAddPolicyResult"
        },
        "removeKeyResult": {
          "$ref": "#/definitions/enforcementRemoveKeyResult"
        },
        "removeUsersResult": {
          "$ref": "#/definitions/enforcementRemoveUsersResult"
        },
        "removeAuthenticatorsResult": {
          "$ref": "#/definitions/enforcementRemoveAuthenticatorsResult"
        },
        "removeInvitationResult": {
          "$ref": "#/definitions/enforcementRemoveInvitationResult"
        },
        "removeOrganizationResult": {
          "$ref": "#/definitions/enforcementRemoveOrganizationResult"
        },
        "removePolicyResult": {
          "$ref": "#/definitions/enforcementRemovePolicyResult"
        },
        "addTagResult": {
          "$ref": "#/definitions/enforcementAddTagResult"
        },
        "removeTagsResult": {
          "$ref": "#/definitions/enforcementRemoveTagsResult"
        },
        "signTransactionResult": {
          "$ref": "#/definitions/enforcementSignTransactionResult"
        },
        "removeApiKeysResult": {
          "$ref": "#/definitions/enforcementRemoveApiKeysResult"
        },
        "addApiKeysResult": {
          "$ref": "#/definitions/enforcementAddApiKeysResult"
        }
      }
    },
    "enforcementSignMessageIntent": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "keyId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "payload": {
          "type": "string",
          "title": "@inject_tag: validate:\"required\""
        },
        "encoding": {
          "$ref": "#/definitions/signaturePayloadEncoding"
        },
        "hashFunction": {
          "$ref": "#/definitions/signatureHashFunction"
        }
      },
      "required": [
        "organizationId",
        "keyId",
        "payload",
        "encoding",
        "hashFunction"
      ]
    },
    "enforcementSignMessageResult": {
      "type": "object",
      "properties": {
        "r": {
          "type": "string"
        },
        "s": {
          "type": "string"
        },
        "v": {
          "type": "string"
        }
      },
      "required": ["r", "s", "v"]
    },
    "enforcementSignTransactionIntent": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "keyId": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,uuid\""
        },
        "unsignedTransaction": {
          "type": "string",
          "title": "@inject_tag: validate:\"required\""
        },
        "type": {
          "$ref": "#/definitions/resourcesTransactionType"
        }
      },
      "required": ["organizationId", "keyId", "unsignedTransaction", "type"]
    },
    "enforcementSignTransactionResult": {
      "type": "object",
      "properties": {
        "signedTransaction": {
          "type": "string"
        }
      },
      "required": ["signedTransaction"]
    },
    "enforcementUserParams": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string",
          "title": "@inject_tag: validate:\"required,max=40\""
        },
        "email": {
          "type": "string",
          "title": "@inject_tag: validate:\"email\""
        },
        "accessType": {
          "$ref": "#/definitions/resourcesAccessType"
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enforcementApiKeyParams"
          },
          "title": "@inject_tag: validate:\"dive,uuid\""
        },
        "authenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enforcementAuthenticatorParams"
          },
          "title": "@inject_tag: validate:\"dive\""
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@inject_tag: validate:\"dive,uuid\""
        }
      },
      "required": ["alias", "accessType", "apiKeys", "authenticators", "tags"]
    },
    "organization_dataOrganizationData": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesUser"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesPolicy"
          }
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesKey"
          }
        },
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesInvitation"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesTag"
          }
        },
        "deletedUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesUser"
          }
        },
        "deletedPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesPolicy"
          }
        },
        "deletedKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesKey"
          }
        },
        "deletedInvitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesInvitation"
          }
        },
        "deletedApiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesApiKey"
          }
        },
        "deletedAuthenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesAuthenticator"
          }
        },
        "deletedTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesTag"
          }
        }
      },
      "description": "This proto definition dictates the encoding of organization data blobs in our database\nIt does so indirectly: we use this message to derive Rust types. These Rust types are\nthen used to serialize to, and deserialize from, JSON."
    },
    "policyEffect": {
      "type": "string",
      "enum": ["EFFECT_ALLOW", "EFFECT_DENY"]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "publicv1CreateApiKeysRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activityCreateApiKeysRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1CreateInvitationsRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activityCreateInvitationsRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1CreateKeysRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activityCreateKeysRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1CreatePolicyRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activityCreatePolicyRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1CreateUsersRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activityCreateUsersRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1DeleteApiKeysRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activityDeleteApiKeysRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1DeleteInvitationRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activityDeleteInvitationRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1DeletePolicyRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activityDeletePolicyRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1DeleteUsersRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activityDeleteUsersRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1SignMessageRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activitySignMessageRequest"
        }
      },
      "required": ["request"]
    },
    "publicv1SignTransactionRequest": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/activitySignTransactionRequest"
        }
      },
      "required": ["request"]
    },
    "resourcesAccessType": {
      "type": "string",
      "enum": ["ACCESS_TYPE_WEB", "ACCESS_TYPE_API", "ACCESS_TYPE_ALL"]
    },
    "resourcesAddress": {
      "type": "object",
      "properties": {
        "format": {
          "$ref": "#/definitions/resourcesAddressFormat"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "resourcesAddressFormat": {
      "type": "string",
      "enum": [
        "ADDRESS_FORMAT_UNCOMPRESSED",
        "ADDRESS_FORMAT_COMPRESSED",
        "ADDRESS_FORMAT_ETHEREUM",
        "ADDRESS_FORMAT_BITCOIN_P2PKH",
        "ADDRESS_FORMAT_BITCOIN_P2PKH_TESTNET"
      ],
      "title": "- ADDRESS_FORMAT_UNCOMPRESSED: 04\u003cX_COORDINATE\u003e\u003cY_COORDINATE\u003e\n - ADDRESS_FORMAT_COMPRESSED: 02 or 03, followed by the X coordinate\n - ADDRESS_FORMAT_ETHEREUM: Your standard Ethereum address (0x...). We apply EIP55 casing.\n - ADDRESS_FORMAT_BITCOIN_P2PKH: Bitoin formats. See https://en.bitcoin.it/wiki/List_of_address_prefixes"
    },
    "resourcesApiKey": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/resourcesCredential"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uuid": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        }
      },
      "required": [
        "credential",
        "tags",
        "uuid",
        "label",
        "createdAt",
        "updatedAt"
      ]
    },
    "resourcesAuthenticator": {
      "type": "object",
      "properties": {
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/webauthnAuthenticatorTransport"
          }
        },
        "attestationType": {
          "type": "string"
        },
        "aaguid": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "credentialId": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "credential": {
          "$ref": "#/definitions/resourcesCredential"
        },
        "uuid": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "transports",
        "attestationType",
        "aaguid",
        "userId",
        "credentialId",
        "model",
        "credential",
        "uuid",
        "label",
        "createdAt",
        "updatedAt",
        "tags"
      ]
    },
    "resourcesCredential": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string"
        },
        "scheme": {
          "$ref": "#/definitions/signatureSignatureScheme"
        }
      },
      "required": ["publicKey", "scheme"]
    },
    "resourcesExternalKey": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "curve": {
          "$ref": "#/definitions/curveCurve"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesAddress"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Key with data that is safe to share publicly",
      "required": ["uuid", "publicKey", "label", "curve", "addresses", "tags"]
    },
    "resourcesInvitation": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "receiverAlias": {
          "type": "string"
        },
        "receiverEmail": {
          "type": "string"
        },
        "receiverTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessType": {
          "$ref": "#/definitions/resourcesAccessType"
        },
        "status": {
          "$ref": "#/definitions/resourcesInvitationStatus"
        },
        "createdAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "senderUserId": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "receiverAlias",
        "receiverEmail",
        "receiverTags",
        "accessType",
        "status",
        "createdAt",
        "updatedAt",
        "senderUserId"
      ]
    },
    "resourcesInvitationStatus": {
      "type": "string",
      "enum": [
        "INVITATION_STATUS_CREATED",
        "INVITATION_STATUS_ACCEPTED",
        "INVITATION_STATUS_REVOKED"
      ]
    },
    "resourcesKey": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "publicKey": {
          "type": "string",
          "title": "public key (!= address)"
        },
        "encryptedPrivateKey": {
          "type": "string",
          "title": "encrypted private key"
        },
        "label": {
          "type": "string"
        },
        "curve": {
          "$ref": "#/definitions/curveCurve"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesAddress"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        }
      },
      "required": [
        "uuid",
        "publicKey",
        "encryptedPrivateKey",
        "label",
        "curve",
        "addresses",
        "tags",
        "createdAt",
        "updatedAt"
      ]
    },
    "resourcesOperator": {
      "type": "string",
      "enum": [
        "OPERATOR_EQUAL",
        "OPERATOR_MORE_THAN",
        "OPERATOR_MORE_THAN_OR_EQUAL",
        "OPERATOR_LESS_THAN",
        "OPERATOR_LESS_THAN_OR_EQUAL",
        "OPERATOR_CONTAINS",
        "OPERATOR_NOT_EQUAL"
      ]
    },
    "resourcesPolicy": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "effect": {
          "$ref": "#/definitions/policyEffect"
        },
        "selectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesSelector"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "notes": {
          "type": "string"
        }
      },
      "required": [
        "uuid",
        "label",
        "effect",
        "selectors",
        "createdAt",
        "updatedAt",
        "notes"
      ]
    },
    "resourcesSelector": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/resourcesOperator"
        },
        "target": {
          "type": "string"
        }
      },
      "required": ["subject", "operator", "target"]
    },
    "resourcesTag": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "tagType": {
          "$ref": "#/definitions/resourcesTagType"
        },
        "createdAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        }
      },
      "required": ["uuid", "label", "tagType", "createdAt", "updatedAt"]
    },
    "resourcesTagType": {
      "type": "string",
      "enum": [
        "TAG_TYPE_USER",
        "TAG_TYPE_API_KEY",
        "TAG_TYPE_KEY",
        "TAG_TYPE_AUTHENTICATOR"
      ]
    },
    "resourcesTimestamp": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string"
        },
        "nanos": {
          "type": "string"
        }
      },
      "title": "Need borsch serialization, so can't use the internal timestamp",
      "required": ["seconds", "nanos"]
    },
    "resourcesTransactionType": {
      "type": "string",
      "enum": ["TRANSACTION_TYPE_ETHEREUM"],
      "title": "- TRANSACTION_TYPE_ETHEREUM: Unsigned Ethereum transaction, RLP-encoded and hex-encoded"
    },
    "resourcesUser": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "title": "some users do not have emails (programmatic users)"
        },
        "accessType": {
          "$ref": "#/definitions/resourcesAccessType"
        },
        "authenticators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesAuthenticator"
          }
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesApiKey"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/resourcesTimestamp"
        }
      },
      "required": [
        "uuid",
        "alias",
        "accessType",
        "authenticators",
        "apiKeys",
        "tags",
        "createdAt",
        "updatedAt"
      ]
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "signatureHashFunction": {
      "type": "string",
      "enum": [
        "HASH_FUNCTION_NO_OP",
        "HASH_FUNCTION_SHA256",
        "HASH_FUNCTION_KECCAK256"
      ],
      "description": " - HASH_FUNCTION_UNSPECIFIED: Default value if hash function is not set explicitly\n - HASH_FUNCTION_NO_OP: No-op function. Useful if you want to pass raw bytes to sign\n - HASH_FUNCTION_SHA256: Standard SHA-256\n - HASH_FUNCTION_KECCAK256: Keccak-256 (not the same as NIST SHA-3!).\nThis is the hash function used in the Ethereum ecosystem."
    },
    "signaturePayloadEncoding": {
      "type": "string",
      "enum": ["PAYLOAD_ENCODING_HEXADECIMAL", "PAYLOAD_ENCODING_TEXT_UTF8"],
      "title": "- PAYLOAD_ENCODING_UNSPECIFIED: Default value if payload encoding is not set explicitly\n - PAYLOAD_ENCODING_HEXADECIMAL: Payload is encoded in hexadecimal\nWe accept 0x-prefixed or non-0x prefixed payloads.\nWe accept any casing (uppercase, lowercase, or mixed)\n - PAYLOAD_ENCODING_TEXT_UTF8: Payload is encoded as utf-8 text\nWill be converted to bytes for signature with Rust's standard String.as_bytes()"
    },
    "signatureSignatureScheme": {
      "type": "string",
      "enum": [
        "SIGNATURE_SCHEME_TK_API_P256",
        "SIGNATURE_SCHEME_TK_WEBAUTHN",
        "SIGNATURE_SCHEME_TK_QUORUM_P256"
      ],
      "title": "- SIGNATURE_SCHEME_TK_API_P256: Scheme used for Turnkey's public API\n - SIGNATURE_SCHEME_TK_WEBAUTHN: Scheme used on our UI when users sign with Webauthn\nPublic keys are encoded using COSE (https://www.w3.org/TR/webauthn-2/#sctn-encoded-credPubKey-examples)\n - SIGNATURE_SCHEME_TK_QUORUM_P256: Scheme used by our enclave applications"
    },
    "v1ActivityResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/activityActivity"
        }
      },
      "required": ["activity"]
    },
    "v1GetActivityRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        }
      },
      "required": ["organizationId", "activityId"]
    },
    "v1GetKeyRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "keyId": {
          "type": "string"
        }
      },
      "required": ["organizationId", "keyId"]
    },
    "v1GetKeyResponse": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/resourcesExternalKey"
        }
      },
      "required": ["key"]
    },
    "v1GetKeysRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        }
      },
      "required": ["organizationId"]
    },
    "v1GetKeysResponse": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesExternalKey"
          }
        }
      },
      "required": ["keys"]
    },
    "v1GetOrganizationRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        }
      },
      "required": ["organizationId"]
    },
    "v1GetOrganizationResponse": {
      "type": "object",
      "properties": {
        "organizationData": {
          "$ref": "#/definitions/organization_dataOrganizationData"
        }
      },
      "required": ["organizationData"]
    },
    "v1GetUserRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "required": ["organizationId", "userId"]
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/resourcesUser"
        }
      },
      "required": ["user"]
    },
    "v1GetUsersRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        }
      },
      "required": ["organizationId"]
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesUser"
          }
        }
      },
      "required": ["users"]
    },
    "v1GetWhoamiRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        }
      },
      "required": ["organizationId"]
    },
    "v1GetWhoamiResponse": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": ["organizationId", "organizationName", "userId", "username"]
    },
    "webauthnAuthenticatorAttestationResponse": {
      "type": "object",
      "properties": {
        "clientDataJson": {
          "type": "string",
          "title": "ENCODING: base64url"
        },
        "attestationObject": {
          "type": "string",
          "title": "ENCODING: base64url"
        },
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/webauthnAuthenticatorTransport"
          }
        },
        "authenticatorAttachment": {
          "type": "string",
          "enum": ["cross-platform", "platform"],
          "x-nullable": true
        }
      },
      "required": ["clientDataJson", "attestationObject"]
    },
    "webauthnAuthenticatorTransport": {
      "type": "string",
      "enum": [
        "AUTHENTICATOR_TRANSPORT_BLE",
        "AUTHENTICATOR_TRANSPORT_INTERNAL",
        "AUTHENTICATOR_TRANSPORT_NFC",
        "AUTHENTICATOR_TRANSPORT_USB",
        "AUTHENTICATOR_TRANSPORT_HYBRID"
      ]
    },
    "webauthnCredPropsAuthenticationExtensionsClientOutputs": {
      "type": "object",
      "properties": {
        "rk": {
          "type": "boolean"
        }
      },
      "required": ["rk"]
    },
    "webauthnPublicKeyCredentialWithAttestation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["public-key"],
          "title": "Must be literal string \"public-key\""
        },
        "rawId": {
          "type": "string",
          "title": "ENCODING: base64url"
        },
        "authenticatorAttachment": {
          "type": "string",
          "enum": ["cross-platform", "platform"],
          "x-nullable": true
        },
        "response": {
          "$ref": "#/definitions/webauthnAuthenticatorAttestationResponse"
        },
        "clientExtensionResults": {
          "$ref": "#/definitions/webauthnSimpleClientExtensionResults"
        }
      },
      "required": ["id", "type", "rawId", "response", "clientExtensionResults"]
    },
    "webauthnSimpleClientExtensionResults": {
      "type": "object",
      "properties": {
        "appid": {
          "type": "boolean"
        },
        "appidExclude": {
          "type": "boolean"
        },
        "credProps": {
          "$ref": "#/definitions/webauthnCredPropsAuthenticationExtensionsClientOutputs"
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-Stamp",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
