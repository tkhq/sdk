{
  "swagger": "2.0",
  "info": {
    "title": "API Reference",
    "description": "Review our [API Introduction](../api-introduction) to get started.",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "PublicApiService"
    },
    {
      "name": "Organizations",
      "description": "An Organization is the highest level of hierarchy in Turnkey. It can contain many Users, Private Keys, and Policies managed by a Root Quorum. The Root Quorum consists of a set of Users with a consensus threshold. This consensus threshold must be reached by Quorum members in order for any actions to take place.\n\nSee [Root Quorum](../concepts/users/root-quorum) for more information"
    },
    {
      "name": "Invitations",
      "description": "Invitations allow you to invite Users into your Organization via email. Alternatively, Users can be added directly without an Invitation if their ApiKey or Authenticator credentials are known ahead of time.\n\nSee [Users](./api#tag/Users) for more information"
    },
    {
      "name": "Policies",
      "description": "Policies allow for deep customization of the security of your Organization. They can be used to grant permissions or restrict usage of Users and Private Keys. The Policy Engine analyzes all of your Policies on each request to determine whether an Activity is allowed.\n\nSee [Policy Overview](../managing-policies/overview) for more information"
    },
    {
      "name": "Wallets",
      "description": "Wallets contain collections of deterministically generated cryptographic public / private key pairs that share a common seed. Turnkey securely holds the common seed, but only you can access it. In most cases, Wallets should be preferred over Private Keys since they can be represented by a mnemonic phrase, used across a variety of cryptographic curves, and can derive many addresses.\n\nDerived addresses can be used to create digital signatures using the corresponding underlying private key. See [Signing](./api#tag/Signing) for more information"
    },
    {
      "name": "Signing",
      "description": "Signers allow you to create digital signatures. Signatures are used to validate the authenticity and integrity of a digital message. Turnkey makes it easy to produce signatures by allowing you to sign with an address. If Turnkey doesn't yet support an address format you need, you can generate and sign with the public key instead by using the address format `ADDRESS_FORMAT_COMPRESSED`."
    },
    {
      "name": "Private Keys",
      "description": "Private Keys are cryptographic public / private key pairs that can be used for cryptocurrency needs or more generalized encryption. Turnkey securely holds all private key materials for you, but only you can access them.\n\nThe Private Key ID or any derived address can be used to create digital signatures. See [Signing](./api#tag/Signing) for more information"
    },
    {
      "name": "Private Key Tags",
      "description": "Private Key Tags allow you to easily group and permission Private Keys through Policies."
    },
    {
      "name": "Users",
      "description": "Users are responsible for any action taken within an Organization. They can have ApiKey or Auuthenticator credentials, allowing you to onboard teammates to the Organization, or create API-only Users to run as part of your infrastructure."
    },
    {
      "name": "User Tags",
      "description": "User Key Tags allow you to easily group and permission Users through Policies."
    },
    {
      "name": "Authenticators",
      "description": "Authenticators are WebAuthN hardware devices, such as a Macbook TouchID or Yubikey, that can be used to authenticate requests."
    },
    {
      "name": "API Keys",
      "description": "API Keys are used to authenticate requests\n\nSee our [CLI](https://github.com/tkhq/tkcli) for instructions on generating API Keys"
    },
    {
      "name": "Activities",
      "description": "Activities encapsulate all the possible actions that can be taken with Turnkey. Some examples include adding a new user, creating a private key, and signing a transaction.\n\nActivities that modify your Organization are processed asynchronously. To confirm processing is complete and retrieve the Activity results, these activities must be polled until that status has been updated to a finalized state: `COMPLETED` when the activity is successful or `FAILED` when the activity has failed"
    },
    {
      "name": "Consensus",
      "description": "Policies can enforce consensus requirements for Activities. For example, adding a new user requires two admins to approve the request.\n\nActivities that have been proposed, but don't yet meet the Consesnsus requirements will have the status: `REQUIRES_CONSENSUS`. Activities in this state can be approved or rejected using the unique fingerprint generated when an Activity is created."
    }
  ],
  "host": "api.turnkey.com",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/public/v1/query/get_activity": {
      "post": {
        "summary": "Get Activity",
        "description": "Get details about an Activity",
        "operationId": "PublicApiService_GetActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetActivityRequest"
            }
          }
        ],
        "tags": ["Activities"]
      }
    },
    "/public/v1/query/get_api_key": {
      "post": {
        "summary": "Get API key",
        "description": "Get details about an API key",
        "operationId": "PublicApiService_GetApiKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetApiKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetApiKeyRequest"
            }
          }
        ],
        "tags": ["API keys"]
      }
    },
    "/public/v1/query/get_api_keys": {
      "post": {
        "summary": "Get API key",
        "description": "Get details about API keys for a user",
        "operationId": "PublicApiService_GetApiKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetApiKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetApiKeysRequest"
            }
          }
        ],
        "tags": ["API keys"]
      }
    },
    "/public/v1/query/get_attestation": {
      "post": {
        "summary": "Attestation",
        "description": "Get the attestation document corresponding to an enclave.",
        "operationId": "PublicApiService_GetAttestationDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAttestationDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetAttestationDocumentRequest"
            }
          }
        ],
        "tags": ["Attestation"]
      }
    },
    "/public/v1/query/get_authenticator": {
      "post": {
        "summary": "Get Authenticator",
        "description": "Get details about an authenticator",
        "operationId": "PublicApiService_GetAuthenticator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAuthenticatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetAuthenticatorRequest"
            }
          }
        ],
        "tags": ["Authenticators"]
      }
    },
    "/public/v1/query/get_authenticators": {
      "post": {
        "summary": "Get Authenticators",
        "description": "Get details about authenticators for a user",
        "operationId": "PublicApiService_GetAuthenticators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAuthenticatorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetAuthenticatorsRequest"
            }
          }
        ],
        "tags": ["Authenticators"]
      }
    },
    "/public/v1/query/get_oauth_providers": {
      "post": {
        "summary": "Get Oauth providers",
        "description": "Get details about Oauth providers for a user",
        "operationId": "PublicApiService_GetOauthProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOauthProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetOauthProvidersRequest"
            }
          }
        ],
        "tags": ["User Auth"]
      }
    },
    "/public/v1/query/get_organization": {
      "post": {
        "summary": "Get Organization",
        "description": "Get details about an Organization",
        "operationId": "PublicApiService_GetOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/query/get_organization_configs": {
      "post": {
        "summary": "Get Configs",
        "description": "Get quorum settings and features for an organization",
        "operationId": "PublicApiService_GetOrganizationConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationConfigsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetOrganizationConfigsRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/query/get_policy": {
      "post": {
        "summary": "Get Policy",
        "description": "Get details about a Policy",
        "operationId": "PublicApiService_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPolicyRequest"
            }
          }
        ],
        "tags": ["Policies"]
      }
    },
    "/public/v1/query/get_private_key": {
      "post": {
        "summary": "Get Private Key",
        "description": "Get details about a Private Key",
        "operationId": "PublicApiService_GetPrivateKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeyRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/query/get_user": {
      "post": {
        "summary": "Get User",
        "description": "Get details about a User",
        "operationId": "PublicApiService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUserRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/query/get_wallet": {
      "post": {
        "summary": "Get Wallet",
        "description": "Get details about a Wallet",
        "operationId": "PublicApiService_GetWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWalletResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetWalletRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/query/list_activities": {
      "post": {
        "summary": "List Activities",
        "description": "List all Activities within an Organization",
        "operationId": "PublicApiService_GetActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetActivitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetActivitiesRequest"
            }
          }
        ],
        "tags": ["Activities"]
      }
    },
    "/public/v1/query/list_policies": {
      "post": {
        "summary": "List Policies",
        "description": "List all Policies within an Organization",
        "operationId": "PublicApiService_GetPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPoliciesRequest"
            }
          }
        ],
        "tags": ["Policies"]
      }
    },
    "/public/v1/query/list_private_key_tags": {
      "post": {
        "summary": "List Private Key Tags",
        "description": "List all Private Key Tags within an Organization",
        "operationId": "PublicApiService_ListPrivateKeyTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPrivateKeyTagsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListPrivateKeyTagsRequest"
            }
          }
        ],
        "tags": ["Private Key Tags"]
      }
    },
    "/public/v1/query/list_private_keys": {
      "post": {
        "summary": "List Private Keys",
        "description": "List all Private Keys within an Organization",
        "operationId": "PublicApiService_GetPrivateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetPrivateKeysRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/query/list_suborgs": {
      "post": {
        "summary": "Get Suborgs",
        "description": "Get all suborg IDs associated given a parent org ID and an optional filter.",
        "operationId": "PublicApiService_GetSubOrgIds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSubOrgIdsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSubOrgIdsRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/query/list_user_tags": {
      "post": {
        "summary": "List User Tags",
        "description": "List all User Tags within an Organization",
        "operationId": "PublicApiService_ListUserTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserTagsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListUserTagsRequest"
            }
          }
        ],
        "tags": ["User Tags"]
      }
    },
    "/public/v1/query/list_users": {
      "post": {
        "summary": "List Users",
        "description": "List all Users within an Organization",
        "operationId": "PublicApiService_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUsersRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/query/list_verified_suborgs": {
      "post": {
        "summary": "Get Verified Suborgs",
        "description": "Get all email or phone verified suborg IDs associated given a parent org ID.",
        "operationId": "PublicApiService_GetVerifiedSubOrgIds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVerifiedSubOrgIdsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetVerifiedSubOrgIdsRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/query/list_wallet_accounts": {
      "post": {
        "summary": "List Wallets Accounts",
        "description": "List all Accounts wirhin a Wallet",
        "operationId": "PublicApiService_GetWalletAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWalletAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetWalletAccountsRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/query/list_wallets": {
      "post": {
        "summary": "List Wallets",
        "description": "List all Wallets within an Organization",
        "operationId": "PublicApiService_GetWallets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWalletsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetWalletsRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/query/whoami": {
      "post": {
        "summary": "Who am I?",
        "description": "Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.",
        "operationId": "PublicApiService_GetWhoami",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWhoamiResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetWhoamiRequest"
            }
          }
        ],
        "tags": ["Sessions"]
      }
    },
    "/public/v1/submit/approve_activity": {
      "post": {
        "summary": "Approve Activity",
        "description": "Approve an Activity",
        "operationId": "PublicApiService_ApproveActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ApproveActivityRequest"
            }
          }
        ],
        "tags": ["Consensus"]
      }
    },
    "/public/v1/submit/create_api_keys": {
      "post": {
        "summary": "Create API Keys",
        "description": "Add api keys to an existing User",
        "operationId": "PublicApiService_CreateApiKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateApiKeysRequest"
            }
          }
        ],
        "tags": ["API Keys"]
      }
    },
    "/public/v1/submit/create_api_only_users": {
      "post": {
        "summary": "Create API-only Users",
        "description": "Create API-only Users in an existing Organization",
        "operationId": "PublicApiService_CreateApiOnlyUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateApiOnlyUsersRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/submit/create_authenticators": {
      "post": {
        "summary": "Create Authenticators",
        "description": "Create Authenticators to authenticate requests to Turnkey",
        "operationId": "PublicApiService_CreateAuthenticators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAuthenticatorsRequest"
            }
          }
        ],
        "tags": ["Authenticators"]
      }
    },
    "/public/v1/submit/create_invitations": {
      "post": {
        "summary": "Create Invitations",
        "description": "Create Invitations to join an existing Organization",
        "operationId": "PublicApiService_CreateInvitations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateInvitationsRequest"
            }
          }
        ],
        "tags": ["Invitations"]
      }
    },
    "/public/v1/submit/create_oauth_providers": {
      "post": {
        "summary": "Create Oauth Providers",
        "description": "Creates Oauth providers for a specified user - BETA",
        "operationId": "PublicApiService_CreateOauthProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOauthProvidersRequest"
            }
          }
        ],
        "tags": ["User Auth"]
      }
    },
    "/public/v1/submit/create_policies": {
      "post": {
        "summary": "Create Policies",
        "description": "Create new Policies",
        "operationId": "PublicApiService_CreatePolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePoliciesRequest"
            }
          }
        ],
        "tags": ["Policies"]
      }
    },
    "/public/v1/submit/create_policy": {
      "post": {
        "summary": "Create Policy",
        "description": "Create a new Policy",
        "operationId": "PublicApiService_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyRequest"
            }
          }
        ],
        "tags": ["Policies"]
      }
    },
    "/public/v1/submit/create_private_key_tag": {
      "post": {
        "summary": "Create Private Key Tag",
        "description": "Create a private key tag and add it to private keys.",
        "operationId": "PublicApiService_CreatePrivateKeyTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePrivateKeyTagRequest"
            }
          }
        ],
        "tags": ["Private Key Tags"]
      }
    },
    "/public/v1/submit/create_private_keys": {
      "post": {
        "summary": "Create Private Keys",
        "description": "Create new Private Keys",
        "operationId": "PublicApiService_CreatePrivateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePrivateKeysRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/submit/create_read_only_session": {
      "post": {
        "summary": "Create Read Only Session",
        "description": "Create a read only session for a user (valid for 1 hour)",
        "operationId": "PublicApiService_CreateReadOnlySession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateReadOnlySessionRequest"
            }
          }
        ],
        "tags": ["Sessions"]
      }
    },
    "/public/v1/submit/create_read_write_session": {
      "post": {
        "summary": "Create Read Write Session",
        "description": "Create a read write session for a user",
        "operationId": "PublicApiService_CreateReadWriteSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateReadWriteSessionRequest"
            }
          }
        ],
        "tags": ["Sessions"]
      }
    },
    "/public/v1/submit/create_sub_organization": {
      "post": {
        "summary": "Create Sub-Organization",
        "description": "Create a new Sub-Organization",
        "operationId": "PublicApiService_CreateSubOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSubOrganizationRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/submit/create_user_tag": {
      "post": {
        "summary": "Create User Tag",
        "description": "Create a user tag and add it to users.",
        "operationId": "PublicApiService_CreateUserTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserTagRequest"
            }
          }
        ],
        "tags": ["User Tags"]
      }
    },
    "/public/v1/submit/create_users": {
      "post": {
        "summary": "Create Users",
        "description": "Create Users in an existing Organization",
        "operationId": "PublicApiService_CreateUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUsersRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/submit/create_wallet": {
      "post": {
        "summary": "Create Wallet",
        "description": "Create a Wallet and derive addresses",
        "operationId": "PublicApiService_CreateWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateWalletRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/submit/create_wallet_accounts": {
      "post": {
        "summary": "Create Wallet Accounts",
        "description": "Derive additional addresses using an existing wallet",
        "operationId": "PublicApiService_CreateWalletAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateWalletAccountsRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/submit/delete_api_keys": {
      "post": {
        "summary": "Delete API Keys",
        "description": "Remove api keys from a User",
        "operationId": "PublicApiService_DeleteApiKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteApiKeysRequest"
            }
          }
        ],
        "tags": ["API Keys"]
      }
    },
    "/public/v1/submit/delete_authenticators": {
      "post": {
        "summary": "Delete Authenticators",
        "description": "Remove authenticators from a User",
        "operationId": "PublicApiService_DeleteAuthenticators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteAuthenticatorsRequest"
            }
          }
        ],
        "tags": ["Authenticators"]
      }
    },
    "/public/v1/submit/delete_invitation": {
      "post": {
        "summary": "Delete Invitation",
        "description": "Delete an existing Invitation",
        "operationId": "PublicApiService_DeleteInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteInvitationRequest"
            }
          }
        ],
        "tags": ["Invitations"]
      }
    },
    "/public/v1/submit/delete_oauth_providers": {
      "post": {
        "summary": "Delete Oauth Providers",
        "description": "Removes Oauth providers for a specified user - BETA",
        "operationId": "PublicApiService_DeleteOauthProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteOauthProvidersRequest"
            }
          }
        ],
        "tags": ["User Auth"]
      }
    },
    "/public/v1/submit/delete_policy": {
      "post": {
        "summary": "Delete Policy",
        "description": "Delete an existing Policy",
        "operationId": "PublicApiService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeletePolicyRequest"
            }
          }
        ],
        "tags": ["Policies"]
      }
    },
    "/public/v1/submit/delete_private_key_tags": {
      "post": {
        "summary": "Delete Private Key Tags",
        "description": "Delete Private Key Tags within an Organization",
        "operationId": "PublicApiService_DeletePrivateKeyTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeletePrivateKeyTagsRequest"
            }
          }
        ],
        "tags": ["Private Key Tags"]
      }
    },
    "/public/v1/submit/delete_private_keys": {
      "post": {
        "summary": "Delete Private Keys",
        "description": "Deletes private keys for an organization",
        "operationId": "PublicApiService_DeletePrivateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeletePrivateKeysRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/submit/delete_sub_organization": {
      "post": {
        "summary": "Delete Sub Organization",
        "description": "Deletes a sub organization",
        "operationId": "PublicApiService_DeleteSubOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteSubOrganizationRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/submit/delete_user_tags": {
      "post": {
        "summary": "Delete User Tags",
        "description": "Delete User Tags within an Organization",
        "operationId": "PublicApiService_DeleteUserTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteUserTagsRequest"
            }
          }
        ],
        "tags": ["User Tags"]
      }
    },
    "/public/v1/submit/delete_users": {
      "post": {
        "summary": "Delete Users",
        "description": "Delete Users within an Organization",
        "operationId": "PublicApiService_DeleteUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteUsersRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/submit/delete_wallets": {
      "post": {
        "summary": "Delete Wallets",
        "description": "Deletes wallets for an organization",
        "operationId": "PublicApiService_DeleteWallets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteWalletsRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/submit/email_auth": {
      "post": {
        "summary": "Perform Email Auth",
        "description": "Authenticate a user via Email",
        "operationId": "PublicApiService_EmailAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EmailAuthRequest"
            }
          }
        ],
        "tags": ["User Auth"]
      }
    },
    "/public/v1/submit/export_private_key": {
      "post": {
        "summary": "Export Private Key",
        "description": "Exports a Private Key",
        "operationId": "PublicApiService_ExportPrivateKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExportPrivateKeyRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/submit/export_wallet": {
      "post": {
        "summary": "Export Wallet",
        "description": "Exports a Wallet",
        "operationId": "PublicApiService_ExportWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExportWalletRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/submit/export_wallet_account": {
      "post": {
        "summary": "Export Wallet Account",
        "description": "Exports a Wallet Account",
        "operationId": "PublicApiService_ExportWalletAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExportWalletAccountRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/submit/import_private_key": {
      "post": {
        "summary": "Import Private Key",
        "description": "Imports a private key",
        "operationId": "PublicApiService_ImportPrivateKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportPrivateKeyRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/submit/import_wallet": {
      "post": {
        "summary": "Import Wallet",
        "description": "Imports a wallet",
        "operationId": "PublicApiService_ImportWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportWalletRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/submit/init_import_private_key": {
      "post": {
        "summary": "Init Import Private Key",
        "description": "Initializes a new private key import",
        "operationId": "PublicApiService_InitImportPrivateKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InitImportPrivateKeyRequest"
            }
          }
        ],
        "tags": ["Private Keys"]
      }
    },
    "/public/v1/submit/init_import_wallet": {
      "post": {
        "summary": "Init Import Wallet",
        "description": "Initializes a new wallet import",
        "operationId": "PublicApiService_InitImportWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InitImportWalletRequest"
            }
          }
        ],
        "tags": ["Wallets"]
      }
    },
    "/public/v1/submit/init_otp_auth": {
      "post": {
        "summary": "Init OTP auth",
        "description": "Initiate an OTP auth activity",
        "operationId": "PublicApiService_InitOtpAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InitOtpAuthRequest"
            }
          }
        ],
        "tags": ["User Auth"]
      }
    },
    "/public/v1/submit/init_user_email_recovery": {
      "post": {
        "summary": "Init Email Recovery",
        "description": "Initializes a new email recovery",
        "operationId": "PublicApiService_InitUserEmailRecovery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InitUserEmailRecoveryRequest"
            }
          }
        ],
        "tags": ["User Recovery"]
      }
    },
    "/public/v1/submit/oauth": {
      "post": {
        "summary": "Oauth",
        "description": "Authenticate a user with an Oidc token (Oauth) - BETA",
        "operationId": "PublicApiService_Oauth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OauthRequest"
            }
          }
        ],
        "tags": ["User Auth"]
      }
    },
    "/public/v1/submit/otp_auth": {
      "post": {
        "summary": "OTP auth",
        "description": "Authenticate a user with an OTP code sent via email or SMS",
        "operationId": "PublicApiService_OtpAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OtpAuthRequest"
            }
          }
        ],
        "tags": ["User Auth"]
      }
    },
    "/public/v1/submit/recover_user": {
      "post": {
        "summary": "Recover a user",
        "description": "Completes the process of recovering a user by adding an authenticator",
        "operationId": "PublicApiService_RecoverUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RecoverUserRequest"
            }
          }
        ],
        "tags": ["User Recovery"]
      }
    },
    "/public/v1/submit/reject_activity": {
      "post": {
        "summary": "Reject Activity",
        "description": "Reject an Activity",
        "operationId": "PublicApiService_RejectActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RejectActivityRequest"
            }
          }
        ],
        "tags": ["Consensus"]
      }
    },
    "/public/v1/submit/remove_organization_feature": {
      "post": {
        "summary": "Remove Organization Feature",
        "description": "Removes an organization feature. This activity must be approved by the current root quorum.",
        "operationId": "PublicApiService_RemoveOrganizationFeature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveOrganizationFeatureRequest"
            }
          }
        ],
        "tags": ["Features"]
      }
    },
    "/public/v1/submit/set_organization_feature": {
      "post": {
        "summary": "Set Organization Feature",
        "description": "Sets an organization feature. This activity must be approved by the current root quorum.",
        "operationId": "PublicApiService_SetOrganizationFeature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetOrganizationFeatureRequest"
            }
          }
        ],
        "tags": ["Features"]
      }
    },
    "/public/v1/submit/sign_raw_payload": {
      "post": {
        "summary": "Sign Raw Payload",
        "description": "Sign a raw payload",
        "operationId": "PublicApiService_SignRawPayload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignRawPayloadRequest"
            }
          }
        ],
        "tags": ["Signing"]
      }
    },
    "/public/v1/submit/sign_raw_payloads": {
      "post": {
        "summary": "Sign Raw Payloads",
        "description": "Sign multiple raw payloads with the same signing parameters",
        "operationId": "PublicApiService_SignRawPayloads",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignRawPayloadsRequest"
            }
          }
        ],
        "tags": ["Signing"]
      }
    },
    "/public/v1/submit/sign_transaction": {
      "post": {
        "summary": "Sign Transaction",
        "description": "Sign a transaction",
        "operationId": "PublicApiService_SignTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignTransactionRequest"
            }
          }
        ],
        "tags": ["Signing"]
      }
    },
    "/public/v1/submit/update_policy": {
      "post": {
        "summary": "Update Policy",
        "description": "Update an existing Policy",
        "operationId": "PublicApiService_UpdatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePolicyRequest"
            }
          }
        ],
        "tags": ["Policies"]
      }
    },
    "/public/v1/submit/update_private_key_tag": {
      "post": {
        "summary": "Update Private Key Tag",
        "description": "Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.",
        "operationId": "PublicApiService_UpdatePrivateKeyTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePrivateKeyTagRequest"
            }
          }
        ],
        "tags": ["Private Key Tags"]
      }
    },
    "/public/v1/submit/update_root_quorum": {
      "post": {
        "summary": "Update Root Quorum",
        "description": "Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.",
        "operationId": "PublicApiService_UpdateRootQuorum",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateRootQuorumRequest"
            }
          }
        ],
        "tags": ["Organizations"]
      }
    },
    "/public/v1/submit/update_user": {
      "post": {
        "summary": "Update User",
        "description": "Update a User in an existing Organization",
        "operationId": "PublicApiService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateUserRequest"
            }
          }
        ],
        "tags": ["Users"]
      }
    },
    "/public/v1/submit/update_user_tag": {
      "post": {
        "summary": "Update User Tag",
        "description": "Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.",
        "operationId": "PublicApiService_UpdateUserTag",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateUserTagRequest"
            }
          }
        ],
        "tags": ["User Tags"]
      }
    },
    "/tkhq/api/v1/noop-codegen-anchor": {
      "post": {
        "operationId": "PublicApiService_NOOPCodegenAnchor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NOOPCodegenAnchorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": ["PublicApiService"]
      }
    }
  },
  "definitions": {
    "apiApiKeyParams": {
      "type": "object",
      "properties": {
        "apiKeyName": {
          "type": "string",
          "description": "Human-readable name for an API Key."
        },
        "publicKey": {
          "type": "string",
          "description": "The public component of a cryptographic key pair used to sign messages and transactions."
        },
        "expirationSeconds": {
          "type": "string",
          "description": "Optional window (in seconds) indicating how long the API Key should last."
        }
      },
      "required": ["apiKeyName", "publicKey"]
    },
    "billingActivateBillingTierIntent": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "description": "The product that the customer wants to subscribe to."
        }
      },
      "required": ["productId"]
    },
    "billingActivateBillingTierResult": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "description": "The id of the product being subscribed to."
        }
      },
      "required": ["productId"]
    },
    "billingDeletePaymentMethodIntent": {
      "type": "object",
      "properties": {
        "paymentMethodId": {
          "type": "string",
          "description": "The payment method that the customer wants to remove."
        }
      },
      "required": ["paymentMethodId"]
    },
    "billingDeletePaymentMethodResult": {
      "type": "object",
      "properties": {
        "paymentMethodId": {
          "type": "string",
          "description": "The payment method that was removed."
        }
      },
      "required": ["paymentMethodId"]
    },
    "billingSetPaymentMethodIntent": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "description": "The account number of the customer's credit card."
        },
        "cvv": {
          "type": "string",
          "description": "The verification digits of the customer's credit card."
        },
        "expiryMonth": {
          "type": "string",
          "description": "The month that the credit card expires."
        },
        "expiryYear": {
          "type": "string",
          "description": "The year that the credit card expires."
        },
        "cardHolderEmail": {
          "type": "string",
          "description": "The email that will receive invoices for the credit card."
        },
        "cardHolderName": {
          "type": "string",
          "description": "The name associated with the credit card."
        }
      },
      "required": [
        "number",
        "cvv",
        "expiryMonth",
        "expiryYear",
        "cardHolderEmail",
        "cardHolderName"
      ]
    },
    "billingSetPaymentMethodIntentV2": {
      "type": "object",
      "properties": {
        "paymentMethodId": {
          "type": "string",
          "description": "The id of the payment method that was created clientside."
        },
        "cardHolderEmail": {
          "type": "string",
          "description": "The email that will receive invoices for the credit card."
        },
        "cardHolderName": {
          "type": "string",
          "description": "The name associated with the credit card."
        }
      },
      "required": ["paymentMethodId", "cardHolderEmail", "cardHolderName"]
    },
    "billingSetPaymentMethodResult": {
      "type": "object",
      "properties": {
        "lastFour": {
          "type": "string",
          "description": "The last four digits of the credit card added."
        },
        "cardHolderName": {
          "type": "string",
          "description": "The name associated with the payment method."
        },
        "cardHolderEmail": {
          "type": "string",
          "description": "The email address associated with the payment method."
        }
      },
      "required": ["lastFour", "cardHolderName", "cardHolderEmail"]
    },
    "datav1Tag": {
      "type": "object",
      "properties": {
        "tagId": {
          "type": "string",
          "description": "Unique identifier for a given Tag."
        },
        "tagName": {
          "type": "string",
          "description": "Human-readable name for a Tag."
        },
        "tagType": {
          "$ref": "#/definitions/v1TagType"
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        }
      },
      "required": ["tagId", "tagName", "tagType", "createdAt", "updatedAt"]
    },
    "externaldatav1Address": {
      "type": "object",
      "properties": {
        "format": {
          "$ref": "#/definitions/v1AddressFormat"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "externaldatav1Credential": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "description": "The public component of a cryptographic key pair used to sign messages and transactions."
        },
        "type": {
          "$ref": "#/definitions/v1CredentialType"
        }
      },
      "required": ["publicKey", "type"]
    },
    "externaldatav1Quorum": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "integer",
          "format": "int32",
          "description": "Count of unique approvals required to meet quorum."
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique identifiers of quorum set members."
        }
      },
      "required": ["threshold", "userIds"]
    },
    "externaldatav1Timestamp": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string"
        },
        "nanos": {
          "type": "string"
        }
      },
      "required": ["seconds", "nanos"]
    },
    "immutableactivityv1Address": {
      "type": "object",
      "properties": {
        "format": {
          "$ref": "#/definitions/v1AddressFormat"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AcceptInvitationIntent": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation object."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "authenticator": {
          "$ref": "#/definitions/v1AuthenticatorParams",
          "description": "WebAuthN hardware devices that can be used to log in to the Turnkey web app."
        }
      },
      "required": ["invitationId", "userId", "authenticator"]
    },
    "v1AcceptInvitationIntentV2": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation object."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "authenticator": {
          "$ref": "#/definitions/v1AuthenticatorParamsV2",
          "description": "WebAuthN hardware devices that can be used to log in to the Turnkey web app."
        }
      },
      "required": ["invitationId", "userId", "authenticator"]
    },
    "v1AcceptInvitationResult": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["invitationId", "userId"]
    },
    "v1AccessType": {
      "type": "string",
      "enum": ["ACCESS_TYPE_WEB", "ACCESS_TYPE_API", "ACCESS_TYPE_ALL"]
    },
    "v1Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for a given Activity object."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "status": {
          "$ref": "#/definitions/v1ActivityStatus",
          "description": "The current processing status of a specified Activity."
        },
        "type": {
          "$ref": "#/definitions/v1ActivityType",
          "description": "Type of Activity, such as Add User, or Sign Transaction."
        },
        "intent": {
          "$ref": "#/definitions/v1Intent",
          "description": "Intent object crafted by Turnkey based on the user request, used to assess the permissibility of an action."
        },
        "result": {
          "$ref": "#/definitions/v1Result",
          "description": "Result of the intended action."
        },
        "votes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Vote"
          },
          "description": "A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata."
        },
        "fingerprint": {
          "type": "string",
          "description": "An artifact verifying a User's action."
        },
        "canApprove": {
          "type": "boolean"
        },
        "canReject": {
          "type": "boolean"
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "failure": {
          "$ref": "#/definitions/rpcStatus",
          "description": "Failure reason of the intended action."
        }
      },
      "required": [
        "id",
        "organizationId",
        "status",
        "type",
        "intent",
        "result",
        "votes",
        "fingerprint",
        "canApprove",
        "canReject",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1ActivityResponse": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/v1Activity",
          "description": "An action that can that can be taken within the Turnkey infrastructure."
        }
      },
      "required": ["activity"]
    },
    "v1ActivityStatus": {
      "type": "string",
      "enum": [
        "ACTIVITY_STATUS_CREATED",
        "ACTIVITY_STATUS_PENDING",
        "ACTIVITY_STATUS_COMPLETED",
        "ACTIVITY_STATUS_FAILED",
        "ACTIVITY_STATUS_CONSENSUS_NEEDED",
        "ACTIVITY_STATUS_REJECTED"
      ]
    },
    "v1ActivityType": {
      "type": "string",
      "enum": [
        "ACTIVITY_TYPE_CREATE_API_KEYS",
        "ACTIVITY_TYPE_CREATE_USERS",
        "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS",
        "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD",
        "ACTIVITY_TYPE_CREATE_INVITATIONS",
        "ACTIVITY_TYPE_ACCEPT_INVITATION",
        "ACTIVITY_TYPE_CREATE_POLICY",
        "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY",
        "ACTIVITY_TYPE_DELETE_USERS",
        "ACTIVITY_TYPE_DELETE_API_KEYS",
        "ACTIVITY_TYPE_DELETE_INVITATION",
        "ACTIVITY_TYPE_DELETE_ORGANIZATION",
        "ACTIVITY_TYPE_DELETE_POLICY",
        "ACTIVITY_TYPE_CREATE_USER_TAG",
        "ACTIVITY_TYPE_DELETE_USER_TAGS",
        "ACTIVITY_TYPE_CREATE_ORGANIZATION",
        "ACTIVITY_TYPE_SIGN_TRANSACTION",
        "ACTIVITY_TYPE_APPROVE_ACTIVITY",
        "ACTIVITY_TYPE_REJECT_ACTIVITY",
        "ACTIVITY_TYPE_DELETE_AUTHENTICATORS",
        "ACTIVITY_TYPE_CREATE_AUTHENTICATORS",
        "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG",
        "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS",
        "ACTIVITY_TYPE_SET_PAYMENT_METHOD",
        "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER",
        "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD",
        "ACTIVITY_TYPE_CREATE_POLICY_V2",
        "ACTIVITY_TYPE_CREATE_POLICY_V3",
        "ACTIVITY_TYPE_CREATE_API_ONLY_USERS",
        "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM",
        "ACTIVITY_TYPE_UPDATE_USER_TAG",
        "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG",
        "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2",
        "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2",
        "ACTIVITY_TYPE_CREATE_USERS_V2",
        "ACTIVITY_TYPE_ACCEPT_INVITATION_V2",
        "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION",
        "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2",
        "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS",
        "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2",
        "ACTIVITY_TYPE_UPDATE_USER",
        "ACTIVITY_TYPE_UPDATE_POLICY",
        "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2",
        "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3",
        "ACTIVITY_TYPE_CREATE_WALLET",
        "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS",
        "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY",
        "ACTIVITY_TYPE_RECOVER_USER",
        "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
        "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE",
        "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
        "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
        "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY",
        "ACTIVITY_TYPE_EXPORT_WALLET",
        "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4",
        "ACTIVITY_TYPE_EMAIL_AUTH",
        "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT",
        "ACTIVITY_TYPE_INIT_IMPORT_WALLET",
        "ACTIVITY_TYPE_IMPORT_WALLET",
        "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY",
        "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY",
        "ACTIVITY_TYPE_CREATE_POLICIES",
        "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS",
        "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION",
        "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS",
        "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS",
        "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5",
        "ACTIVITY_TYPE_OAUTH",
        "ACTIVITY_TYPE_CREATE_API_KEYS_V2",
        "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION",
        "ACTIVITY_TYPE_EMAIL_AUTH_V2",
        "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6",
        "ACTIVITY_TYPE_DELETE_PRIVATE_KEYS",
        "ACTIVITY_TYPE_DELETE_WALLETS",
        "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2",
        "ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION",
        "ACTIVITY_TYPE_INIT_OTP_AUTH",
        "ACTIVITY_TYPE_OTP_AUTH",
        "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7"
      ]
    },
    "v1AddressFormat": {
      "type": "string",
      "enum": [
        "ADDRESS_FORMAT_UNCOMPRESSED",
        "ADDRESS_FORMAT_COMPRESSED",
        "ADDRESS_FORMAT_ETHEREUM",
        "ADDRESS_FORMAT_SOLANA",
        "ADDRESS_FORMAT_COSMOS",
        "ADDRESS_FORMAT_TRON",
        "ADDRESS_FORMAT_SUI",
        "ADDRESS_FORMAT_APTOS",
        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH",
        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH",
        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH",
        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH",
        "ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR",
        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH",
        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH",
        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH",
        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH",
        "ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR",
        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH",
        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH",
        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH",
        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH",
        "ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR",
        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH",
        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH",
        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH",
        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH",
        "ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR",
        "ADDRESS_FORMAT_SEI",
        "ADDRESS_FORMAT_XLM",
        "ADDRESS_FORMAT_DOGE_MAINNET",
        "ADDRESS_FORMAT_DOGE_TESTNET",
        "ADDRESS_FORMAT_TON_V3R2",
        "ADDRESS_FORMAT_TON_V4R2",
        "ADDRESS_FORMAT_XRP"
      ]
    },
    "v1ApiKey": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/externaldatav1Credential",
          "description": "A User credential that can be used to authenticate to Turnkey."
        },
        "apiKeyId": {
          "type": "string",
          "description": "Unique identifier for a given API Key."
        },
        "apiKeyName": {
          "type": "string",
          "description": "Human-readable name for an API Key."
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "expirationSeconds": {
          "type": "string",
          "format": "uint64",
          "description": "Optional window (in seconds) indicating how long the API Key should last."
        }
      },
      "required": [
        "credential",
        "apiKeyId",
        "apiKeyName",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1ApiKeyCurve": {
      "type": "string",
      "enum": [
        "API_KEY_CURVE_P256",
        "API_KEY_CURVE_SECP256K1",
        "API_KEY_CURVE_ED25519"
      ]
    },
    "v1ApiKeyParamsV2": {
      "type": "object",
      "properties": {
        "apiKeyName": {
          "type": "string",
          "description": "Human-readable name for an API Key."
        },
        "publicKey": {
          "type": "string",
          "description": "The public component of a cryptographic key pair used to sign messages and transactions."
        },
        "curveType": {
          "$ref": "#/definitions/v1ApiKeyCurve",
          "description": "The curve type to be used for processing API key signatures."
        },
        "expirationSeconds": {
          "type": "string",
          "description": "Optional window (in seconds) indicating how long the API Key should last."
        }
      },
      "required": ["apiKeyName", "publicKey", "curveType"]
    },
    "v1ApiOnlyUserParams": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "The name of the new API-only User."
        },
        "userEmail": {
          "type": "string",
          "description": "The email address for this API-only User (optional)."
        },
        "userTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of tags assigned to the new API-only User."
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiApiKeyParams"
          },
          "description": "A list of API Key parameters."
        }
      },
      "required": ["userName", "userTags", "apiKeys"]
    },
    "v1ApproveActivityIntent": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string",
          "description": "An artifact verifying a User's action."
        }
      },
      "required": ["fingerprint"]
    },
    "v1ApproveActivityRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_APPROVE_ACTIVITY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1ApproveActivityIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1Attestation": {
      "type": "object",
      "properties": {
        "credentialId": {
          "type": "string",
          "description": "The cbor encoded then base64 url encoded id of the credential."
        },
        "clientDataJson": {
          "type": "string",
          "description": "A base64 url encoded payload containing metadata about the signing context and the challenge."
        },
        "attestationObject": {
          "type": "string",
          "description": "A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses."
        },
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuthenticatorTransport"
          },
          "description": "The type of authenticator transports."
        }
      },
      "required": [
        "credentialId",
        "clientDataJson",
        "attestationObject",
        "transports"
      ]
    },
    "v1Authenticator": {
      "type": "object",
      "properties": {
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuthenticatorTransport"
          },
          "description": "Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE)."
        },
        "attestationType": {
          "type": "string"
        },
        "aaguid": {
          "type": "string",
          "description": "Identifier indicating the type of the Security Key."
        },
        "credentialId": {
          "type": "string",
          "description": "Unique identifier for a WebAuthn credential."
        },
        "model": {
          "type": "string",
          "description": "The type of Authenticator device."
        },
        "credential": {
          "$ref": "#/definitions/externaldatav1Credential",
          "description": "A User credential that can be used to authenticate to Turnkey."
        },
        "authenticatorId": {
          "type": "string",
          "description": "Unique identifier for a given Authenticator."
        },
        "authenticatorName": {
          "type": "string",
          "description": "Human-readable name for an Authenticator."
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        }
      },
      "required": [
        "transports",
        "attestationType",
        "aaguid",
        "credentialId",
        "model",
        "credential",
        "authenticatorId",
        "authenticatorName",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1AuthenticatorAttestationResponse": {
      "type": "object",
      "properties": {
        "clientDataJson": {
          "type": "string"
        },
        "attestationObject": {
          "type": "string"
        },
        "transports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AuthenticatorTransport"
          }
        },
        "authenticatorAttachment": {
          "type": "string",
          "enum": ["cross-platform", "platform"],
          "x-nullable": true
        }
      },
      "required": ["clientDataJson", "attestationObject"]
    },
    "v1AuthenticatorParams": {
      "type": "object",
      "properties": {
        "authenticatorName": {
          "type": "string",
          "description": "Human-readable name for an Authenticator."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "attestation": {
          "$ref": "#/definitions/v1PublicKeyCredentialWithAttestation"
        },
        "challenge": {
          "type": "string",
          "description": "Challenge presented for authentication purposes."
        }
      },
      "required": ["authenticatorName", "userId", "attestation", "challenge"]
    },
    "v1AuthenticatorParamsV2": {
      "type": "object",
      "properties": {
        "authenticatorName": {
          "type": "string",
          "description": "Human-readable name for an Authenticator."
        },
        "challenge": {
          "type": "string",
          "description": "Challenge presented for authentication purposes."
        },
        "attestation": {
          "$ref": "#/definitions/v1Attestation",
          "description": "The attestation that proves custody of the authenticator and provides metadata about it."
        }
      },
      "required": ["authenticatorName", "challenge", "attestation"]
    },
    "v1AuthenticatorTransport": {
      "type": "string",
      "enum": [
        "AUTHENTICATOR_TRANSPORT_BLE",
        "AUTHENTICATOR_TRANSPORT_INTERNAL",
        "AUTHENTICATOR_TRANSPORT_NFC",
        "AUTHENTICATOR_TRANSPORT_USB",
        "AUTHENTICATOR_TRANSPORT_HYBRID"
      ]
    },
    "v1Config": {
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Feature"
          }
        },
        "quorum": {
          "$ref": "#/definitions/externaldatav1Quorum"
        }
      }
    },
    "v1CreateApiKeysIntent": {
      "type": "object",
      "properties": {
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiApiKeyParams"
          },
          "description": "A list of API Keys."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["apiKeys", "userId"]
    },
    "v1CreateApiKeysIntentV2": {
      "type": "object",
      "properties": {
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ApiKeyParamsV2"
          },
          "description": "A list of API Keys."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["apiKeys", "userId"]
    },
    "v1CreateApiKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_API_KEYS_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateApiKeysIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateApiKeysResult": {
      "type": "object",
      "properties": {
        "apiKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of API Key IDs."
        }
      },
      "required": ["apiKeyIds"]
    },
    "v1CreateApiOnlyUsersIntent": {
      "type": "object",
      "properties": {
        "apiOnlyUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ApiOnlyUserParams"
          },
          "description": "A list of API-only Users to create."
        }
      },
      "required": ["apiOnlyUsers"]
    },
    "v1CreateApiOnlyUsersRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_API_ONLY_USERS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateApiOnlyUsersIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateApiOnlyUsersResult": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of API-only User IDs."
        }
      },
      "required": ["userIds"]
    },
    "v1CreateAuthenticatorsIntent": {
      "type": "object",
      "properties": {
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuthenticatorParams"
          },
          "description": "A list of Authenticators."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["authenticators", "userId"]
    },
    "v1CreateAuthenticatorsIntentV2": {
      "type": "object",
      "properties": {
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuthenticatorParamsV2"
          },
          "description": "A list of Authenticators."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["authenticators", "userId"]
    },
    "v1CreateAuthenticatorsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateAuthenticatorsIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateAuthenticatorsResult": {
      "type": "object",
      "properties": {
        "authenticatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Authenticator IDs."
        }
      },
      "required": ["authenticatorIds"]
    },
    "v1CreateInvitationsIntent": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvitationParams"
          },
          "description": "A list of Invitations."
        }
      },
      "required": ["invitations"]
    },
    "v1CreateInvitationsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_INVITATIONS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateInvitationsIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateInvitationsResult": {
      "type": "object",
      "properties": {
        "invitationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Invitation IDs"
        }
      },
      "required": ["invitationIds"]
    },
    "v1CreateOauthProvidersIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The ID of the User to add an Oauth provider to"
        },
        "oauthProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OauthProviderParams"
          },
          "description": "A list of Oauth providers."
        }
      },
      "required": ["userId", "oauthProviders"]
    },
    "v1CreateOauthProvidersRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateOauthProvidersIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateOauthProvidersResult": {
      "type": "object",
      "properties": {
        "providerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of unique identifiers for Oauth Providers"
        }
      },
      "required": ["providerIds"]
    },
    "v1CreateOrganizationIntent": {
      "type": "object",
      "properties": {
        "organizationName": {
          "type": "string",
          "description": "Human-readable name for an Organization."
        },
        "rootEmail": {
          "type": "string",
          "description": "The root user's email address."
        },
        "rootAuthenticator": {
          "$ref": "#/definitions/v1AuthenticatorParams",
          "description": "The root user's Authenticator."
        },
        "rootUserId": {
          "type": "string",
          "description": "Unique identifier for the root user object."
        }
      },
      "required": ["organizationName", "rootEmail", "rootAuthenticator"]
    },
    "v1CreateOrganizationIntentV2": {
      "type": "object",
      "properties": {
        "organizationName": {
          "type": "string",
          "description": "Human-readable name for an Organization."
        },
        "rootEmail": {
          "type": "string",
          "description": "The root user's email address."
        },
        "rootAuthenticator": {
          "$ref": "#/definitions/v1AuthenticatorParamsV2",
          "description": "The root user's Authenticator."
        },
        "rootUserId": {
          "type": "string",
          "description": "Unique identifier for the root user object."
        }
      },
      "required": ["organizationName", "rootEmail", "rootAuthenticator"]
    },
    "v1CreateOrganizationResult": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1CreatePoliciesIntent": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreatePolicyIntentV3"
          },
          "description": "An array of policy intents to be created."
        }
      },
      "required": ["policies"]
    },
    "v1CreatePoliciesRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_POLICIES"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreatePoliciesIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreatePoliciesResult": {
      "type": "object",
      "properties": {
        "policyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of unique identifiers for the created policies."
        }
      },
      "required": ["policyIds"]
    },
    "v1CreatePolicyIntent": {
      "type": "object",
      "properties": {
        "policyName": {
          "type": "string",
          "description": "Human-readable name for a Policy."
        },
        "selectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Selector"
          },
          "description": "A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details."
        },
        "effect": {
          "$ref": "#/definitions/v1Effect",
          "description": "The instruction to DENY or ALLOW a particular activity following policy selector(s)."
        },
        "notes": {
          "type": "string"
        }
      },
      "required": ["policyName", "selectors", "effect"]
    },
    "v1CreatePolicyIntentV2": {
      "type": "object",
      "properties": {
        "policyName": {
          "type": "string",
          "description": "Human-readable name for a Policy."
        },
        "selectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SelectorV2"
          },
          "description": "A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details."
        },
        "effect": {
          "$ref": "#/definitions/v1Effect",
          "description": "Whether to ALLOW or DENY requests that match the condition and consensus requirements."
        },
        "notes": {
          "type": "string"
        }
      },
      "required": ["policyName", "selectors", "effect"]
    },
    "v1CreatePolicyIntentV3": {
      "type": "object",
      "properties": {
        "policyName": {
          "type": "string",
          "description": "Human-readable name for a Policy."
        },
        "effect": {
          "$ref": "#/definitions/v1Effect",
          "description": "The instruction to DENY or ALLOW an activity."
        },
        "condition": {
          "type": "string",
          "description": "The condition expression that triggers the Effect"
        },
        "consensus": {
          "type": "string",
          "description": "The consensus expression that triggers the Effect"
        },
        "notes": {
          "type": "string"
        }
      },
      "required": ["policyName", "effect"]
    },
    "v1CreatePolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_POLICY_V3"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreatePolicyIntentV3"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreatePolicyResult": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        }
      },
      "required": ["policyId"]
    },
    "v1CreatePrivateKeyTagIntent": {
      "type": "object",
      "properties": {
        "privateKeyTagName": {
          "type": "string",
          "description": "Human-readable name for a Private Key Tag."
        },
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs."
        }
      },
      "required": ["privateKeyTagName", "privateKeyIds"]
    },
    "v1CreatePrivateKeyTagRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreatePrivateKeyTagIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreatePrivateKeyTagResult": {
      "type": "object",
      "properties": {
        "privateKeyTagId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key Tag."
        },
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs."
        }
      },
      "required": ["privateKeyTagId", "privateKeyIds"]
    },
    "v1CreatePrivateKeysIntent": {
      "type": "object",
      "properties": {
        "privateKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PrivateKeyParams"
          },
          "description": "A list of Private Keys."
        }
      },
      "required": ["privateKeys"]
    },
    "v1CreatePrivateKeysIntentV2": {
      "type": "object",
      "properties": {
        "privateKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PrivateKeyParams"
          },
          "description": "A list of Private Keys."
        }
      },
      "required": ["privateKeys"]
    },
    "v1CreatePrivateKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreatePrivateKeysIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreatePrivateKeysResult": {
      "type": "object",
      "properties": {
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs."
        }
      },
      "required": ["privateKeyIds"]
    },
    "v1CreatePrivateKeysResultV2": {
      "type": "object",
      "properties": {
        "privateKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PrivateKeyResult"
          },
          "description": "A list of Private Key IDs and addresses."
        }
      },
      "required": ["privateKeys"]
    },
    "v1CreateReadOnlySessionIntent": {
      "type": "object"
    },
    "v1CreateReadOnlySessionRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateReadOnlySessionIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateReadOnlySessionResult": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons."
        },
        "organizationName": {
          "type": "string",
          "description": "Human-readable name for an Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "username": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "session": {
          "type": "string",
          "description": "String representing a read only session"
        },
        "sessionExpiry": {
          "type": "string",
          "format": "uint64",
          "description": "UTC timestamp in seconds representing the expiry time for the read only session."
        }
      },
      "required": [
        "organizationId",
        "organizationName",
        "userId",
        "username",
        "session",
        "sessionExpiry"
      ]
    },
    "v1CreateReadWriteSessionIntent": {
      "type": "object",
      "properties": {
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted."
        },
        "email": {
          "type": "string",
          "description": "Email of the user to create a read write session for"
        },
        "apiKeyName": {
          "type": "string",
          "description": "Optional human-readable name for an API Key. If none provided, default to Read Write Session - \u003cTimestamp\u003e"
        },
        "expirationSeconds": {
          "type": "string",
          "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
        }
      },
      "required": ["targetPublicKey", "email"]
    },
    "v1CreateReadWriteSessionIntentV2": {
      "type": "object",
      "properties": {
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "apiKeyName": {
          "type": "string",
          "description": "Optional human-readable name for an API Key. If none provided, default to Read Write Session - \u003cTimestamp\u003e"
        },
        "expirationSeconds": {
          "type": "string",
          "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
        }
      },
      "required": ["targetPublicKey"]
    },
    "v1CreateReadWriteSessionRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateReadWriteSessionIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateReadWriteSessionResult": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons."
        },
        "organizationName": {
          "type": "string",
          "description": "Human-readable name for an Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "username": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "apiKeyId": {
          "type": "string",
          "description": "Unique identifier for the created API key."
        },
        "credentialBundle": {
          "type": "string",
          "description": "HPKE encrypted credential bundle"
        }
      },
      "required": [
        "organizationId",
        "organizationName",
        "userId",
        "username",
        "apiKeyId",
        "credentialBundle"
      ]
    },
    "v1CreateReadWriteSessionResultV2": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons."
        },
        "organizationName": {
          "type": "string",
          "description": "Human-readable name for an Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "username": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "apiKeyId": {
          "type": "string",
          "description": "Unique identifier for the created API key."
        },
        "credentialBundle": {
          "type": "string",
          "description": "HPKE encrypted credential bundle"
        }
      },
      "required": [
        "organizationId",
        "organizationName",
        "userId",
        "username",
        "apiKeyId",
        "credentialBundle"
      ]
    },
    "v1CreateSubOrganizationIntent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for this sub-organization"
        },
        "rootAuthenticator": {
          "$ref": "#/definitions/v1AuthenticatorParamsV2",
          "description": "Root User authenticator for this new sub-organization"
        }
      },
      "required": ["name", "rootAuthenticator"]
    },
    "v1CreateSubOrganizationIntentV2": {
      "type": "object",
      "properties": {
        "subOrganizationName": {
          "type": "string",
          "description": "Name for this sub-organization"
        },
        "rootUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RootUserParams"
          },
          "description": "Root users to create within this sub-organization"
        },
        "rootQuorumThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users"
        }
      },
      "required": ["subOrganizationName", "rootUsers", "rootQuorumThreshold"]
    },
    "v1CreateSubOrganizationIntentV3": {
      "type": "object",
      "properties": {
        "subOrganizationName": {
          "type": "string",
          "description": "Name for this sub-organization"
        },
        "rootUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RootUserParams"
          },
          "description": "Root users to create within this sub-organization"
        },
        "rootQuorumThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users"
        },
        "privateKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PrivateKeyParams"
          },
          "description": "A list of Private Keys."
        }
      },
      "required": [
        "subOrganizationName",
        "rootUsers",
        "rootQuorumThreshold",
        "privateKeys"
      ]
    },
    "v1CreateSubOrganizationIntentV4": {
      "type": "object",
      "properties": {
        "subOrganizationName": {
          "type": "string",
          "description": "Name for this sub-organization"
        },
        "rootUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RootUserParams"
          },
          "description": "Root users to create within this sub-organization"
        },
        "rootQuorumThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users"
        },
        "wallet": {
          "$ref": "#/definitions/v1WalletParams",
          "description": "The wallet to create for the sub-organization"
        },
        "disableEmailRecovery": {
          "type": "boolean",
          "description": "Disable email recovery for the sub-organization"
        },
        "disableEmailAuth": {
          "type": "boolean",
          "description": "Disable email auth for the sub-organization"
        }
      },
      "required": ["subOrganizationName", "rootUsers", "rootQuorumThreshold"]
    },
    "v1CreateSubOrganizationIntentV5": {
      "type": "object",
      "properties": {
        "subOrganizationName": {
          "type": "string",
          "description": "Name for this sub-organization"
        },
        "rootUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RootUserParamsV2"
          },
          "description": "Root users to create within this sub-organization"
        },
        "rootQuorumThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users"
        },
        "wallet": {
          "$ref": "#/definitions/v1WalletParams",
          "description": "The wallet to create for the sub-organization"
        },
        "disableEmailRecovery": {
          "type": "boolean",
          "description": "Disable email recovery for the sub-organization"
        },
        "disableEmailAuth": {
          "type": "boolean",
          "description": "Disable email auth for the sub-organization"
        }
      },
      "required": ["subOrganizationName", "rootUsers", "rootQuorumThreshold"]
    },
    "v1CreateSubOrganizationIntentV6": {
      "type": "object",
      "properties": {
        "subOrganizationName": {
          "type": "string",
          "description": "Name for this sub-organization"
        },
        "rootUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RootUserParamsV3"
          },
          "description": "Root users to create within this sub-organization"
        },
        "rootQuorumThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users"
        },
        "wallet": {
          "$ref": "#/definitions/v1WalletParams",
          "description": "The wallet to create for the sub-organization"
        },
        "disableEmailRecovery": {
          "type": "boolean",
          "description": "Disable email recovery for the sub-organization"
        },
        "disableEmailAuth": {
          "type": "boolean",
          "description": "Disable email auth for the sub-organization"
        }
      },
      "required": ["subOrganizationName", "rootUsers", "rootQuorumThreshold"]
    },
    "v1CreateSubOrganizationIntentV7": {
      "type": "object",
      "properties": {
        "subOrganizationName": {
          "type": "string",
          "description": "Name for this sub-organization"
        },
        "rootUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RootUserParamsV4"
          },
          "description": "Root users to create within this sub-organization"
        },
        "rootQuorumThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users"
        },
        "wallet": {
          "$ref": "#/definitions/v1WalletParams",
          "description": "The wallet to create for the sub-organization"
        },
        "disableEmailRecovery": {
          "type": "boolean",
          "description": "Disable email recovery for the sub-organization"
        },
        "disableEmailAuth": {
          "type": "boolean",
          "description": "Disable email auth for the sub-organization"
        },
        "disableSmsAuth": {
          "type": "boolean",
          "description": "Disable OTP SMS auth for the sub-organization"
        },
        "disableOtpEmailAuth": {
          "type": "boolean",
          "description": "Disable OTP email auth for the sub-organization"
        }
      },
      "required": ["subOrganizationName", "rootUsers", "rootQuorumThreshold"]
    },
    "v1CreateSubOrganizationRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntentV7"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateSubOrganizationResult": {
      "type": "object",
      "properties": {
        "subOrganizationId": {
          "type": "string"
        },
        "rootUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["subOrganizationId"]
    },
    "v1CreateSubOrganizationResultV3": {
      "type": "object",
      "properties": {
        "subOrganizationId": {
          "type": "string"
        },
        "privateKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PrivateKeyResult"
          },
          "description": "A list of Private Key IDs and addresses."
        },
        "rootUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["subOrganizationId", "privateKeys"]
    },
    "v1CreateSubOrganizationResultV4": {
      "type": "object",
      "properties": {
        "subOrganizationId": {
          "type": "string"
        },
        "wallet": {
          "$ref": "#/definitions/v1WalletResult"
        },
        "rootUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["subOrganizationId"]
    },
    "v1CreateSubOrganizationResultV5": {
      "type": "object",
      "properties": {
        "subOrganizationId": {
          "type": "string"
        },
        "wallet": {
          "$ref": "#/definitions/v1WalletResult"
        },
        "rootUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["subOrganizationId"]
    },
    "v1CreateSubOrganizationResultV6": {
      "type": "object",
      "properties": {
        "subOrganizationId": {
          "type": "string"
        },
        "wallet": {
          "$ref": "#/definitions/v1WalletResult"
        },
        "rootUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["subOrganizationId"]
    },
    "v1CreateSubOrganizationResultV7": {
      "type": "object",
      "properties": {
        "subOrganizationId": {
          "type": "string"
        },
        "wallet": {
          "$ref": "#/definitions/v1WalletResult"
        },
        "rootUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["subOrganizationId"]
    },
    "v1CreateUserTagIntent": {
      "type": "object",
      "properties": {
        "userTagName": {
          "type": "string",
          "description": "Human-readable name for a User Tag."
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userTagName", "userIds"]
    },
    "v1CreateUserTagRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_USER_TAG"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateUserTagIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateUserTagResult": {
      "type": "object",
      "properties": {
        "userTagId": {
          "type": "string",
          "description": "Unique identifier for a given User Tag."
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userTagId", "userIds"]
    },
    "v1CreateUsersIntent": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserParams"
          },
          "description": "A list of Users."
        }
      },
      "required": ["users"]
    },
    "v1CreateUsersIntentV2": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserParamsV2"
          },
          "description": "A list of Users."
        }
      },
      "required": ["users"]
    },
    "v1CreateUsersRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_USERS_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateUsersIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateUsersResult": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userIds"]
    },
    "v1CreateWalletAccountsIntent": {
      "type": "object",
      "properties": {
        "walletId": {
          "type": "string",
          "description": "Unique identifier for a given Wallet."
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WalletAccountParams"
          },
          "description": "A list of wallet Accounts."
        }
      },
      "required": ["walletId", "accounts"]
    },
    "v1CreateWalletAccountsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateWalletAccountsIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateWalletAccountsResult": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of derived addresses."
        }
      },
      "required": ["addresses"]
    },
    "v1CreateWalletIntent": {
      "type": "object",
      "properties": {
        "walletName": {
          "type": "string",
          "description": "Human-readable name for a Wallet."
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WalletAccountParams"
          },
          "description": "A list of wallet Accounts."
        },
        "mnemonicLength": {
          "type": "integer",
          "format": "int32",
          "description": "Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24."
        }
      },
      "required": ["walletName", "accounts"]
    },
    "v1CreateWalletRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_CREATE_WALLET"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1CreateWalletIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1CreateWalletResult": {
      "type": "object",
      "properties": {
        "walletId": {
          "type": "string",
          "description": "Unique identifier for a Wallet."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of account addresses."
        }
      },
      "required": ["walletId", "addresses"]
    },
    "v1CredPropsAuthenticationExtensionsClientOutputs": {
      "type": "object",
      "properties": {
        "rk": {
          "type": "boolean"
        }
      },
      "required": ["rk"]
    },
    "v1CredentialType": {
      "type": "string",
      "enum": [
        "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR",
        "CREDENTIAL_TYPE_API_KEY_P256",
        "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256",
        "CREDENTIAL_TYPE_API_KEY_SECP256K1",
        "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256",
        "CREDENTIAL_TYPE_API_KEY_ED25519",
        "CREDENTIAL_TYPE_OTP_AUTH_KEY_P256"
      ]
    },
    "v1Curve": {
      "type": "string",
      "enum": ["CURVE_SECP256K1", "CURVE_ED25519"]
    },
    "v1DeleteApiKeysIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "apiKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of API Key IDs."
        }
      },
      "required": ["userId", "apiKeyIds"]
    },
    "v1DeleteApiKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_API_KEYS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteApiKeysIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteApiKeysResult": {
      "type": "object",
      "properties": {
        "apiKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of API Key IDs."
        }
      },
      "required": ["apiKeyIds"]
    },
    "v1DeleteAuthenticatorsIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "authenticatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Authenticator IDs."
        }
      },
      "required": ["userId", "authenticatorIds"]
    },
    "v1DeleteAuthenticatorsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_AUTHENTICATORS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteAuthenticatorsIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteAuthenticatorsResult": {
      "type": "object",
      "properties": {
        "authenticatorIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique identifier for a given Authenticator."
        }
      },
      "required": ["authenticatorIds"]
    },
    "v1DeleteInvitationIntent": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation object."
        }
      },
      "required": ["invitationId"]
    },
    "v1DeleteInvitationRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_INVITATION"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteInvitationIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteInvitationResult": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation."
        }
      },
      "required": ["invitationId"]
    },
    "v1DeleteOauthProvidersIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The ID of the User to remove an Oauth provider from"
        },
        "providerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique identifier for a given Provider."
        }
      },
      "required": ["userId", "providerIds"]
    },
    "v1DeleteOauthProvidersRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteOauthProvidersIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteOauthProvidersResult": {
      "type": "object",
      "properties": {
        "providerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of unique identifiers for Oauth Providers"
        }
      },
      "required": ["providerIds"]
    },
    "v1DeleteOrganizationIntent": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1DeleteOrganizationResult": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1DeletePolicyIntent": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        }
      },
      "required": ["policyId"]
    },
    "v1DeletePolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_POLICY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeletePolicyIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeletePolicyResult": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        }
      },
      "required": ["policyId"]
    },
    "v1DeletePrivateKeyTagsIntent": {
      "type": "object",
      "properties": {
        "privateKeyTagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key Tag IDs."
        }
      },
      "required": ["privateKeyTagIds"]
    },
    "v1DeletePrivateKeyTagsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeletePrivateKeyTagsIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeletePrivateKeyTagsResult": {
      "type": "object",
      "properties": {
        "privateKeyTagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key Tag IDs."
        },
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs."
        }
      },
      "required": ["privateKeyTagIds", "privateKeyIds"]
    },
    "v1DeletePrivateKeysIntent": {
      "type": "object",
      "properties": {
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of unique identifiers for private keys within an organization"
        },
        "deleteWithoutExport": {
          "type": "boolean",
          "description": "Optional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored."
        }
      },
      "required": ["privateKeyIds"]
    },
    "v1DeletePrivateKeysRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_PRIVATE_KEYS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeletePrivateKeysIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeletePrivateKeysResult": {
      "type": "object",
      "properties": {
        "privateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of private key unique identifiers that were removed"
        }
      },
      "required": ["privateKeyIds"]
    },
    "v1DeleteSubOrganizationIntent": {
      "type": "object",
      "properties": {
        "deleteWithoutExport": {
          "type": "boolean",
          "description": "Sub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false."
        }
      }
    },
    "v1DeleteSubOrganizationRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteSubOrganizationIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteSubOrganizationResult": {
      "type": "object",
      "properties": {
        "subOrganizationUuid": {
          "type": "string",
          "description": "Unique identifier of the sub organization that was removed"
        }
      },
      "required": ["subOrganizationUuid"]
    },
    "v1DeleteUserTagsIntent": {
      "type": "object",
      "properties": {
        "userTagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs."
        }
      },
      "required": ["userTagIds"]
    },
    "v1DeleteUserTagsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_USER_TAGS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteUserTagsIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteUserTagsResult": {
      "type": "object",
      "properties": {
        "userTagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs."
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userTagIds", "userIds"]
    },
    "v1DeleteUsersIntent": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userIds"]
    },
    "v1DeleteUsersRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_USERS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteUsersIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteUsersResult": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs."
        }
      },
      "required": ["userIds"]
    },
    "v1DeleteWalletsIntent": {
      "type": "object",
      "properties": {
        "walletIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of unique identifiers for wallets within an organization"
        },
        "deleteWithoutExport": {
          "type": "boolean",
          "description": "Optional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored."
        }
      },
      "required": ["walletIds"]
    },
    "v1DeleteWalletsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_DELETE_WALLETS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1DeleteWalletsIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1DeleteWalletsResult": {
      "type": "object",
      "properties": {
        "walletIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of wallet unique identifiers that were removed"
        }
      },
      "required": ["walletIds"]
    },
    "v1DisablePrivateKeyIntent": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        }
      },
      "required": ["privateKeyId"]
    },
    "v1DisablePrivateKeyResult": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        }
      },
      "required": ["privateKeyId"]
    },
    "v1Effect": {
      "type": "string",
      "enum": ["EFFECT_ALLOW", "EFFECT_DENY"]
    },
    "v1EmailAuthIntent": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of the authenticating user."
        },
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted."
        },
        "apiKeyName": {
          "type": "string",
          "description": "Optional human-readable name for an API Key. If none provided, default to Email Auth - \u003cTimestamp\u003e"
        },
        "expirationSeconds": {
          "type": "string",
          "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
        },
        "emailCustomization": {
          "$ref": "#/definitions/v1EmailCustomizationParams",
          "description": "Optional parameters for customizing emails. If not provided, the default email will be used."
        },
        "invalidateExisting": {
          "type": "boolean",
          "description": "Invalidate all other previously generated Email Auth API keys"
        }
      },
      "required": ["email", "targetPublicKey"]
    },
    "v1EmailAuthIntentV2": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of the authenticating user."
        },
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted."
        },
        "apiKeyName": {
          "type": "string",
          "description": "Optional human-readable name for an API Key. If none provided, default to Email Auth - \u003cTimestamp\u003e"
        },
        "expirationSeconds": {
          "type": "string",
          "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
        },
        "emailCustomization": {
          "$ref": "#/definitions/v1EmailCustomizationParams",
          "description": "Optional parameters for customizing emails. If not provided, the default email will be used."
        },
        "invalidateExisting": {
          "type": "boolean",
          "description": "Invalidate all other previously generated Email Auth API keys"
        }
      },
      "required": ["email", "targetPublicKey"]
    },
    "v1EmailAuthRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_EMAIL_AUTH_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1EmailAuthIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1EmailAuthResult": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for the authenticating User."
        },
        "apiKeyId": {
          "type": "string",
          "description": "Unique identifier for the created API key."
        }
      },
      "required": ["userId", "apiKeyId"]
    },
    "v1EmailCustomizationParams": {
      "type": "object",
      "properties": {
        "appName": {
          "type": "string",
          "description": "The name of the application."
        },
        "logoUrl": {
          "type": "string",
          "description": "A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px."
        },
        "magicLinkTemplate": {
          "type": "string",
          "description": "A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`."
        },
        "templateVariables": {
          "type": "string",
          "description": "JSON object containing key/value pairs to be used with custom templates."
        },
        "templateId": {
          "type": "string",
          "description": "Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template."
        }
      }
    },
    "v1ExportPrivateKeyIntent": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        },
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the export bundle will be encrypted."
        }
      },
      "required": ["privateKeyId", "targetPublicKey"]
    },
    "v1ExportPrivateKeyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_EXPORT_PRIVATE_KEY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1ExportPrivateKeyIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1ExportPrivateKeyResult": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        },
        "exportBundle": {
          "type": "string",
          "description": "Export bundle containing a private key encrypted to the client's target public key."
        }
      },
      "required": ["privateKeyId", "exportBundle"]
    },
    "v1ExportWalletAccountIntent": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Address to identify Wallet Account."
        },
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the export bundle will be encrypted."
        }
      },
      "required": ["address", "targetPublicKey"]
    },
    "v1ExportWalletAccountRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1ExportWalletAccountIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1ExportWalletAccountResult": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Address to identify Wallet Account."
        },
        "exportBundle": {
          "type": "string",
          "description": "Export bundle containing a private key encrypted by the client's target public key."
        }
      },
      "required": ["address", "exportBundle"]
    },
    "v1ExportWalletIntent": {
      "type": "object",
      "properties": {
        "walletId": {
          "type": "string",
          "description": "Unique identifier for a given Wallet."
        },
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the export bundle will be encrypted."
        },
        "language": {
          "$ref": "#/definitions/v1MnemonicLanguage",
          "description": "The language of the mnemonic to export. Defaults to English."
        }
      },
      "required": ["walletId", "targetPublicKey"]
    },
    "v1ExportWalletRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_EXPORT_WALLET"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1ExportWalletIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1ExportWalletResult": {
      "type": "object",
      "properties": {
        "walletId": {
          "type": "string",
          "description": "Unique identifier for a given Wallet."
        },
        "exportBundle": {
          "type": "string",
          "description": "Export bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key."
        }
      },
      "required": ["walletId", "exportBundle"]
    },
    "v1Feature": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FeatureName"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1FeatureName": {
      "type": "string",
      "enum": [
        "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY",
        "FEATURE_NAME_WEBAUTHN_ORIGINS",
        "FEATURE_NAME_EMAIL_AUTH",
        "FEATURE_NAME_EMAIL_RECOVERY",
        "FEATURE_NAME_WEBHOOK",
        "FEATURE_NAME_SMS_AUTH",
        "FEATURE_NAME_OTP_EMAIL_AUTH"
      ]
    },
    "v1GetActivitiesRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "filterByStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ActivityStatus"
          },
          "description": "Array of Activity Statuses filtering which Activities will be listed in the response."
        },
        "paginationOptions": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Parameters used for cursor-based pagination."
        },
        "filterByType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ActivityType"
          },
          "description": "Array of Activity Types filtering which Activities will be listed in the response."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Activity"
          },
          "description": "A list of Activities."
        }
      },
      "required": ["activities"]
    },
    "v1GetActivityRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "activityId": {
          "type": "string",
          "description": "Unique identifier for a given Activity object."
        }
      },
      "required": ["organizationId", "activityId"]
    },
    "v1GetApiKeyRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "apiKeyId": {
          "type": "string",
          "description": "Unique identifier for a given API key."
        }
      },
      "required": ["organizationId", "apiKeyId"]
    },
    "v1GetApiKeyResponse": {
      "type": "object",
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/v1ApiKey",
          "description": "An API key."
        }
      },
      "required": ["apiKey"]
    },
    "v1GetApiKeysRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetApiKeysResponse": {
      "type": "object",
      "properties": {
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ApiKey"
          },
          "description": "A list of API keys."
        }
      },
      "required": ["apiKeys"]
    },
    "v1GetAttestationDocumentRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "enclaveType": {
          "type": "string",
          "description": "The enclave type, one of: ump, notarizer, signer, evm-parser"
        }
      },
      "required": ["organizationId", "enclaveType"]
    },
    "v1GetAttestationDocumentResponse": {
      "type": "object",
      "properties": {
        "attestationDocument": {
          "type": "string",
          "format": "byte",
          "description": "Raw (CBOR-encoded) attestation document"
        }
      },
      "required": ["attestationDocument"]
    },
    "v1GetAuthenticatorRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "authenticatorId": {
          "type": "string",
          "description": "Unique identifier for a given Authenticator."
        }
      },
      "required": ["organizationId", "authenticatorId"]
    },
    "v1GetAuthenticatorResponse": {
      "type": "object",
      "properties": {
        "authenticator": {
          "$ref": "#/definitions/v1Authenticator",
          "description": "An authenticator."
        }
      },
      "required": ["authenticator"]
    },
    "v1GetAuthenticatorsRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["organizationId", "userId"]
    },
    "v1GetAuthenticatorsResponse": {
      "type": "object",
      "properties": {
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Authenticator"
          },
          "description": "A list of authenticators."
        }
      },
      "required": ["authenticators"]
    },
    "v1GetOauthProvidersRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetOauthProvidersResponse": {
      "type": "object",
      "properties": {
        "oauthProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OauthProvider"
          },
          "description": "A list of Oauth Providers"
        }
      },
      "required": ["oauthProviders"]
    },
    "v1GetOrganizationConfigsRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetOrganizationConfigsResponse": {
      "type": "object",
      "properties": {
        "configs": {
          "$ref": "#/definitions/v1Config",
          "description": "Organization configs including quorum settings and organization features"
        }
      },
      "required": ["configs"]
    },
    "v1GetOrganizationRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetOrganizationResponse": {
      "type": "object",
      "properties": {
        "organizationData": {
          "$ref": "#/definitions/v1OrganizationData",
          "description": "Object representing the full current and deleted / disabled collection of Users, Policies, Private Keys, and Invitations attributable to a particular Organization."
        }
      },
      "required": ["organizationData"]
    },
    "v1GetPoliciesRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Policy"
          },
          "description": "A list of Policies."
        }
      },
      "required": ["policies"]
    },
    "v1GetPolicyRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        }
      },
      "required": ["organizationId", "policyId"]
    },
    "v1GetPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy",
          "description": "Object that codifies rules defining the actions that are permissible within an Organization."
        }
      },
      "required": ["policy"]
    },
    "v1GetPrivateKeyRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        }
      },
      "required": ["organizationId", "privateKeyId"]
    },
    "v1GetPrivateKeyResponse": {
      "type": "object",
      "properties": {
        "privateKey": {
          "$ref": "#/definitions/v1PrivateKey",
          "description": "Cryptographic public/private key pair that can be used for cryptocurrency needs or more generalized encryption."
        }
      },
      "required": ["privateKey"]
    },
    "v1GetPrivateKeysRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetPrivateKeysResponse": {
      "type": "object",
      "properties": {
        "privateKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PrivateKey"
          },
          "description": "A list of Private Keys."
        }
      },
      "required": ["privateKeys"]
    },
    "v1GetSubOrgIdsRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for the parent Organization. This is used to find sub-organizations within it."
        },
        "filterType": {
          "type": "string",
          "description": "Specifies the type of filter to apply, i.e 'CREDENTIAL_ID', 'NAME', 'USERNAME', 'EMAIL', 'PHONE_NUMBER', 'OIDC_TOKEN' or 'PUBLIC_KEY'"
        },
        "filterValue": {
          "type": "string",
          "description": "The value of the filter to apply for the specified type. For example, a specific email or name string."
        },
        "paginationOptions": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Parameters used for cursor-based pagination."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetSubOrgIdsResponse": {
      "type": "object",
      "properties": {
        "organizationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of unique identifiers for the matching sub-organizations."
        }
      },
      "required": ["organizationIds"]
    },
    "v1GetUserRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        }
      },
      "required": ["organizationId", "userId"]
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "Web and/or API user within your Organization."
        }
      },
      "required": ["user"]
    },
    "v1GetUsersRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1User"
          },
          "description": "A list of Users."
        }
      },
      "required": ["users"]
    },
    "v1GetVerifiedSubOrgIdsRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for the parent Organization. This is used to find sub-organizations within it."
        },
        "filterType": {
          "type": "string",
          "description": "Specifies the type of filter to apply, i.e 'EMAIL', 'PHONE_NUMBER'"
        },
        "filterValue": {
          "type": "string",
          "description": "The value of the filter to apply for the specified type. For example, a specific email or phone number string."
        },
        "paginationOptions": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Parameters used for cursor-based pagination."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetVerifiedSubOrgIdsResponse": {
      "type": "object",
      "properties": {
        "organizationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of unique identifiers for the matching sub-organizations."
        }
      },
      "required": ["organizationIds"]
    },
    "v1GetWalletAccountsRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "walletId": {
          "type": "string",
          "description": "Unique identifier for a given Wallet."
        },
        "paginationOptions": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Parameters used for cursor-based pagination."
        }
      },
      "required": ["organizationId", "walletId"]
    },
    "v1GetWalletAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WalletAccount"
          },
          "description": "A list of Accounts generated from a Wallet that share a common seed"
        }
      },
      "required": ["accounts"]
    },
    "v1GetWalletRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "walletId": {
          "type": "string",
          "description": "Unique identifier for a given Wallet."
        }
      },
      "required": ["organizationId", "walletId"]
    },
    "v1GetWalletResponse": {
      "type": "object",
      "properties": {
        "wallet": {
          "$ref": "#/definitions/v1Wallet",
          "description": "A collection of deterministically generated cryptographic public / private key pairs that share a common seed"
        }
      },
      "required": ["wallet"]
    },
    "v1GetWalletsRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetWalletsResponse": {
      "type": "object",
      "properties": {
        "wallets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Wallet"
          },
          "description": "A list of Wallets."
        }
      },
      "required": ["wallets"]
    },
    "v1GetWhoamiRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization. If the request is being made by a WebAuthN user and their Sub-Organization ID is unknown, this can be the Parent Organization ID; using the Sub-Organization ID when possible is preferred due to performance reasons."
        }
      },
      "required": ["organizationId"]
    },
    "v1GetWhoamiResponse": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "organizationName": {
          "type": "string",
          "description": "Human-readable name for an Organization."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "username": {
          "type": "string",
          "description": "Human-readable name for a User."
        }
      },
      "required": ["organizationId", "organizationName", "userId", "username"]
    },
    "v1HashFunction": {
      "type": "string",
      "enum": [
        "HASH_FUNCTION_NO_OP",
        "HASH_FUNCTION_SHA256",
        "HASH_FUNCTION_KECCAK256",
        "HASH_FUNCTION_NOT_APPLICABLE"
      ]
    },
    "v1ImportPrivateKeyIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The ID of the User importing a Private Key."
        },
        "privateKeyName": {
          "type": "string",
          "description": "Human-readable name for a Private Key."
        },
        "encryptedBundle": {
          "type": "string",
          "description": "Bundle containing a raw private key encrypted to the enclave's target public key."
        },
        "curve": {
          "$ref": "#/definitions/v1Curve",
          "description": "Cryptographic Curve used to generate a given Private Key."
        },
        "addressFormats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AddressFormat"
          },
          "description": "Cryptocurrency-specific formats for a derived address (e.g., Ethereum)."
        }
      },
      "required": [
        "userId",
        "privateKeyName",
        "encryptedBundle",
        "curve",
        "addressFormats"
      ]
    },
    "v1ImportPrivateKeyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_IMPORT_PRIVATE_KEY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1ImportPrivateKeyIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1ImportPrivateKeyResult": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a Private Key."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/immutableactivityv1Address"
          },
          "description": "A list of addresses."
        }
      },
      "required": ["privateKeyId", "addresses"]
    },
    "v1ImportWalletIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The ID of the User importing a Wallet."
        },
        "walletName": {
          "type": "string",
          "description": "Human-readable name for a Wallet."
        },
        "encryptedBundle": {
          "type": "string",
          "description": "Bundle containing a wallet mnemonic encrypted to the enclave's target public key."
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WalletAccountParams"
          },
          "description": "A list of wallet Accounts."
        }
      },
      "required": ["userId", "walletName", "encryptedBundle", "accounts"]
    },
    "v1ImportWalletRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_IMPORT_WALLET"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1ImportWalletIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1ImportWalletResult": {
      "type": "object",
      "properties": {
        "walletId": {
          "type": "string",
          "description": "Unique identifier for a Wallet."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of account addresses."
        }
      },
      "required": ["walletId", "addresses"]
    },
    "v1InitImportPrivateKeyIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The ID of the User importing a Private Key."
        }
      },
      "required": ["userId"]
    },
    "v1InitImportPrivateKeyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1InitImportPrivateKeyIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1InitImportPrivateKeyResult": {
      "type": "object",
      "properties": {
        "importBundle": {
          "type": "string",
          "description": "Import bundle containing a public key and signature to use for importing client data."
        }
      },
      "required": ["importBundle"]
    },
    "v1InitImportWalletIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The ID of the User importing a Wallet."
        }
      },
      "required": ["userId"]
    },
    "v1InitImportWalletRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_INIT_IMPORT_WALLET"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1InitImportWalletIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1InitImportWalletResult": {
      "type": "object",
      "properties": {
        "importBundle": {
          "type": "string",
          "description": "Import bundle containing a public key and signature to use for importing client data."
        }
      },
      "required": ["importBundle"]
    },
    "v1InitOtpAuthIntent": {
      "type": "object",
      "properties": {
        "otpType": {
          "type": "string",
          "description": "Enum to specifiy whether to send OTP via SMS or email"
        },
        "contact": {
          "type": "string",
          "description": "Email or phone number to send the OTP code to"
        },
        "emailCustomization": {
          "$ref": "#/definitions/v1EmailCustomizationParams",
          "description": "Optional parameters for customizing emails. If not provided, the default email will be used."
        },
        "smsCustomization": {
          "$ref": "#/definitions/v1SmsCustomizationParams",
          "description": "Optional parameters for customizing SMS message. If not provided, the default sms message will be used."
        },
        "userIdentifier": {
          "type": "string",
          "description": "Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address."
        }
      },
      "required": ["otpType", "contact"]
    },
    "v1InitOtpAuthRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_INIT_OTP_AUTH"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1InitOtpAuthIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1InitOtpAuthResult": {
      "type": "object",
      "properties": {
        "otpId": {
          "type": "string",
          "description": "Unique identifier for an OTP authentication"
        }
      },
      "required": ["otpId"]
    },
    "v1InitUserEmailRecoveryIntent": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of the user starting recovery"
        },
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the recovery bundle will be encrypted."
        },
        "expirationSeconds": {
          "type": "string",
          "description": "Expiration window (in seconds) indicating how long the recovery credential is valid. If not provided, a default of 15 minutes will be used."
        },
        "emailCustomization": {
          "$ref": "#/definitions/v1EmailCustomizationParams",
          "description": "Optional parameters for customizing emails. If not provided, the default email will be used."
        }
      },
      "required": ["email", "targetPublicKey"]
    },
    "v1InitUserEmailRecoveryRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1InitUserEmailRecoveryIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1InitUserEmailRecoveryResult": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for the user being recovered."
        }
      },
      "required": ["userId"]
    },
    "v1Intent": {
      "type": "object",
      "properties": {
        "createOrganizationIntent": {
          "$ref": "#/definitions/v1CreateOrganizationIntent"
        },
        "createAuthenticatorsIntent": {
          "$ref": "#/definitions/v1CreateAuthenticatorsIntent"
        },
        "createUsersIntent": {
          "$ref": "#/definitions/v1CreateUsersIntent"
        },
        "createPrivateKeysIntent": {
          "$ref": "#/definitions/v1CreatePrivateKeysIntent"
        },
        "signRawPayloadIntent": {
          "$ref": "#/definitions/v1SignRawPayloadIntent"
        },
        "createInvitationsIntent": {
          "$ref": "#/definitions/v1CreateInvitationsIntent"
        },
        "acceptInvitationIntent": {
          "$ref": "#/definitions/v1AcceptInvitationIntent"
        },
        "createPolicyIntent": {
          "$ref": "#/definitions/v1CreatePolicyIntent"
        },
        "disablePrivateKeyIntent": {
          "$ref": "#/definitions/v1DisablePrivateKeyIntent"
        },
        "deleteUsersIntent": {
          "$ref": "#/definitions/v1DeleteUsersIntent"
        },
        "deleteAuthenticatorsIntent": {
          "$ref": "#/definitions/v1DeleteAuthenticatorsIntent"
        },
        "deleteInvitationIntent": {
          "$ref": "#/definitions/v1DeleteInvitationIntent"
        },
        "deleteOrganizationIntent": {
          "$ref": "#/definitions/v1DeleteOrganizationIntent"
        },
        "deletePolicyIntent": {
          "$ref": "#/definitions/v1DeletePolicyIntent"
        },
        "createUserTagIntent": {
          "$ref": "#/definitions/v1CreateUserTagIntent"
        },
        "deleteUserTagsIntent": {
          "$ref": "#/definitions/v1DeleteUserTagsIntent"
        },
        "signTransactionIntent": {
          "$ref": "#/definitions/v1SignTransactionIntent"
        },
        "createApiKeysIntent": {
          "$ref": "#/definitions/v1CreateApiKeysIntent"
        },
        "deleteApiKeysIntent": {
          "$ref": "#/definitions/v1DeleteApiKeysIntent"
        },
        "approveActivityIntent": {
          "$ref": "#/definitions/v1ApproveActivityIntent"
        },
        "rejectActivityIntent": {
          "$ref": "#/definitions/v1RejectActivityIntent"
        },
        "createPrivateKeyTagIntent": {
          "$ref": "#/definitions/v1CreatePrivateKeyTagIntent"
        },
        "deletePrivateKeyTagsIntent": {
          "$ref": "#/definitions/v1DeletePrivateKeyTagsIntent"
        },
        "createPolicyIntentV2": {
          "$ref": "#/definitions/v1CreatePolicyIntentV2"
        },
        "setPaymentMethodIntent": {
          "$ref": "#/definitions/billingSetPaymentMethodIntent"
        },
        "activateBillingTierIntent": {
          "$ref": "#/definitions/billingActivateBillingTierIntent"
        },
        "deletePaymentMethodIntent": {
          "$ref": "#/definitions/billingDeletePaymentMethodIntent"
        },
        "createPolicyIntentV3": {
          "$ref": "#/definitions/v1CreatePolicyIntentV3"
        },
        "createApiOnlyUsersIntent": {
          "$ref": "#/definitions/v1CreateApiOnlyUsersIntent"
        },
        "updateRootQuorumIntent": {
          "$ref": "#/definitions/v1UpdateRootQuorumIntent"
        },
        "updateUserTagIntent": {
          "$ref": "#/definitions/v1UpdateUserTagIntent"
        },
        "updatePrivateKeyTagIntent": {
          "$ref": "#/definitions/v1UpdatePrivateKeyTagIntent"
        },
        "createAuthenticatorsIntentV2": {
          "$ref": "#/definitions/v1CreateAuthenticatorsIntentV2"
        },
        "acceptInvitationIntentV2": {
          "$ref": "#/definitions/v1AcceptInvitationIntentV2"
        },
        "createOrganizationIntentV2": {
          "$ref": "#/definitions/v1CreateOrganizationIntentV2"
        },
        "createUsersIntentV2": {
          "$ref": "#/definitions/v1CreateUsersIntentV2"
        },
        "createSubOrganizationIntent": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntent"
        },
        "createSubOrganizationIntentV2": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntentV2"
        },
        "updateAllowedOriginsIntent": {
          "$ref": "#/definitions/v1UpdateAllowedOriginsIntent"
        },
        "createPrivateKeysIntentV2": {
          "$ref": "#/definitions/v1CreatePrivateKeysIntentV2"
        },
        "updateUserIntent": {
          "$ref": "#/definitions/v1UpdateUserIntent"
        },
        "updatePolicyIntent": {
          "$ref": "#/definitions/v1UpdatePolicyIntent"
        },
        "setPaymentMethodIntentV2": {
          "$ref": "#/definitions/billingSetPaymentMethodIntentV2"
        },
        "createSubOrganizationIntentV3": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntentV3"
        },
        "createWalletIntent": {
          "$ref": "#/definitions/v1CreateWalletIntent"
        },
        "createWalletAccountsIntent": {
          "$ref": "#/definitions/v1CreateWalletAccountsIntent"
        },
        "initUserEmailRecoveryIntent": {
          "$ref": "#/definitions/v1InitUserEmailRecoveryIntent"
        },
        "recoverUserIntent": {
          "$ref": "#/definitions/v1RecoverUserIntent"
        },
        "setOrganizationFeatureIntent": {
          "$ref": "#/definitions/v1SetOrganizationFeatureIntent"
        },
        "removeOrganizationFeatureIntent": {
          "$ref": "#/definitions/v1RemoveOrganizationFeatureIntent"
        },
        "signRawPayloadIntentV2": {
          "$ref": "#/definitions/v1SignRawPayloadIntentV2"
        },
        "signTransactionIntentV2": {
          "$ref": "#/definitions/v1SignTransactionIntentV2"
        },
        "exportPrivateKeyIntent": {
          "$ref": "#/definitions/v1ExportPrivateKeyIntent"
        },
        "exportWalletIntent": {
          "$ref": "#/definitions/v1ExportWalletIntent"
        },
        "createSubOrganizationIntentV4": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntentV4"
        },
        "emailAuthIntent": {
          "$ref": "#/definitions/v1EmailAuthIntent"
        },
        "exportWalletAccountIntent": {
          "$ref": "#/definitions/v1ExportWalletAccountIntent"
        },
        "initImportWalletIntent": {
          "$ref": "#/definitions/v1InitImportWalletIntent"
        },
        "importWalletIntent": {
          "$ref": "#/definitions/v1ImportWalletIntent"
        },
        "initImportPrivateKeyIntent": {
          "$ref": "#/definitions/v1InitImportPrivateKeyIntent"
        },
        "importPrivateKeyIntent": {
          "$ref": "#/definitions/v1ImportPrivateKeyIntent"
        },
        "createPoliciesIntent": {
          "$ref": "#/definitions/v1CreatePoliciesIntent"
        },
        "signRawPayloadsIntent": {
          "$ref": "#/definitions/v1SignRawPayloadsIntent"
        },
        "createReadOnlySessionIntent": {
          "$ref": "#/definitions/v1CreateReadOnlySessionIntent"
        },
        "createOauthProvidersIntent": {
          "$ref": "#/definitions/v1CreateOauthProvidersIntent"
        },
        "deleteOauthProvidersIntent": {
          "$ref": "#/definitions/v1DeleteOauthProvidersIntent"
        },
        "createSubOrganizationIntentV5": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntentV5"
        },
        "oauthIntent": {
          "$ref": "#/definitions/v1OauthIntent"
        },
        "createApiKeysIntentV2": {
          "$ref": "#/definitions/v1CreateApiKeysIntentV2"
        },
        "createReadWriteSessionIntent": {
          "$ref": "#/definitions/v1CreateReadWriteSessionIntent"
        },
        "emailAuthIntentV2": {
          "$ref": "#/definitions/v1EmailAuthIntentV2"
        },
        "createSubOrganizationIntentV6": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntentV6"
        },
        "deletePrivateKeysIntent": {
          "$ref": "#/definitions/v1DeletePrivateKeysIntent"
        },
        "deleteWalletsIntent": {
          "$ref": "#/definitions/v1DeleteWalletsIntent"
        },
        "createReadWriteSessionIntentV2": {
          "$ref": "#/definitions/v1CreateReadWriteSessionIntentV2"
        },
        "deleteSubOrganizationIntent": {
          "$ref": "#/definitions/v1DeleteSubOrganizationIntent"
        },
        "initOtpAuthIntent": {
          "$ref": "#/definitions/v1InitOtpAuthIntent"
        },
        "otpAuthIntent": {
          "$ref": "#/definitions/v1OtpAuthIntent"
        },
        "createSubOrganizationIntentV7": {
          "$ref": "#/definitions/v1CreateSubOrganizationIntentV7"
        }
      }
    },
    "v1Invitation": {
      "type": "object",
      "properties": {
        "invitationId": {
          "type": "string",
          "description": "Unique identifier for a given Invitation object."
        },
        "receiverUserName": {
          "type": "string",
          "description": "The name of the intended Invitation recipient."
        },
        "receiverEmail": {
          "type": "string",
          "description": "The email address of the intended Invitation recipient."
        },
        "receiverUserTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of tags assigned to the Invitation recipient."
        },
        "accessType": {
          "$ref": "#/definitions/v1AccessType",
          "description": "The User's permissible access method(s)."
        },
        "status": {
          "$ref": "#/definitions/v1InvitationStatus",
          "description": "The current processing status of a specified Invitation."
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "senderUserId": {
          "type": "string",
          "description": "Unique identifier for the Sender of an Invitation."
        }
      },
      "required": [
        "invitationId",
        "receiverUserName",
        "receiverEmail",
        "receiverUserTags",
        "accessType",
        "status",
        "createdAt",
        "updatedAt",
        "senderUserId"
      ]
    },
    "v1InvitationParams": {
      "type": "object",
      "properties": {
        "receiverUserName": {
          "type": "string",
          "description": "The name of the intended Invitation recipient."
        },
        "receiverUserEmail": {
          "type": "string",
          "description": "The email address of the intended Invitation recipient."
        },
        "receiverUserTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of tags assigned to the Invitation recipient."
        },
        "accessType": {
          "$ref": "#/definitions/v1AccessType",
          "description": "The User's permissible access method(s)."
        },
        "senderUserId": {
          "type": "string",
          "description": "Unique identifier for the Sender of an Invitation."
        }
      },
      "required": [
        "receiverUserName",
        "receiverUserEmail",
        "receiverUserTags",
        "accessType",
        "senderUserId"
      ]
    },
    "v1InvitationStatus": {
      "type": "string",
      "enum": [
        "INVITATION_STATUS_CREATED",
        "INVITATION_STATUS_ACCEPTED",
        "INVITATION_STATUS_REVOKED"
      ]
    },
    "v1ListPrivateKeyTagsRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1ListPrivateKeyTagsResponse": {
      "type": "object",
      "properties": {
        "privateKeyTags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/datav1Tag"
          },
          "description": "A list of Private Key Tags"
        }
      },
      "required": ["privateKeyTags"]
    },
    "v1ListUserTagsRequest": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        }
      },
      "required": ["organizationId"]
    },
    "v1ListUserTagsResponse": {
      "type": "object",
      "properties": {
        "userTags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/datav1Tag"
          },
          "description": "A list of User Tags"
        }
      },
      "required": ["userTags"]
    },
    "v1MnemonicLanguage": {
      "type": "string",
      "enum": [
        "MNEMONIC_LANGUAGE_ENGLISH",
        "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE",
        "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE",
        "MNEMONIC_LANGUAGE_CZECH",
        "MNEMONIC_LANGUAGE_FRENCH",
        "MNEMONIC_LANGUAGE_ITALIAN",
        "MNEMONIC_LANGUAGE_JAPANESE",
        "MNEMONIC_LANGUAGE_KOREAN",
        "MNEMONIC_LANGUAGE_SPANISH"
      ]
    },
    "v1NOOPCodegenAnchorResponse": {
      "type": "object",
      "properties": {
        "stamp": {
          "$ref": "#/definitions/v1WebAuthnStamp"
        }
      },
      "required": ["stamp"]
    },
    "v1OauthIntent": {
      "type": "object",
      "properties": {
        "oidcToken": {
          "type": "string",
          "description": "Base64 encoded OIDC token"
        },
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted."
        },
        "apiKeyName": {
          "type": "string",
          "description": "Optional human-readable name for an API Key. If none provided, default to Oauth - \u003cTimestamp\u003e"
        },
        "expirationSeconds": {
          "type": "string",
          "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
        }
      },
      "required": ["oidcToken", "targetPublicKey"]
    },
    "v1OauthProvider": {
      "type": "object",
      "properties": {
        "providerId": {
          "type": "string",
          "description": "Unique identifier for an OAuth Provider"
        },
        "providerName": {
          "type": "string",
          "description": "Human-readable name to identify a Provider."
        },
        "issuer": {
          "type": "string",
          "description": "The issuer of the token, typically a URL indicating the authentication server, e.g https://accounts.google.com"
        },
        "audience": {
          "type": "string",
          "description": "Expected audience ('aud' attribute of the signed token) which represents the app ID"
        },
        "subject": {
          "type": "string",
          "description": "Expected subject ('sub' attribute of the signed token) which represents the user ID"
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        }
      },
      "required": [
        "providerId",
        "providerName",
        "issuer",
        "audience",
        "subject",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1OauthProviderParams": {
      "type": "object",
      "properties": {
        "providerName": {
          "type": "string",
          "description": "Human-readable name to identify a Provider."
        },
        "oidcToken": {
          "type": "string",
          "description": "Base64 encoded OIDC token"
        }
      },
      "required": ["providerName", "oidcToken"]
    },
    "v1OauthRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_OAUTH"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1OauthIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1OauthResult": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for the authenticating User."
        },
        "apiKeyId": {
          "type": "string",
          "description": "Unique identifier for the created API key."
        },
        "credentialBundle": {
          "type": "string",
          "description": "HPKE encrypted credential bundle"
        }
      },
      "required": ["userId", "apiKeyId", "credentialBundle"]
    },
    "v1Operator": {
      "type": "string",
      "enum": [
        "OPERATOR_EQUAL",
        "OPERATOR_MORE_THAN",
        "OPERATOR_MORE_THAN_OR_EQUAL",
        "OPERATOR_LESS_THAN",
        "OPERATOR_LESS_THAN_OR_EQUAL",
        "OPERATOR_CONTAINS",
        "OPERATOR_NOT_EQUAL",
        "OPERATOR_IN",
        "OPERATOR_NOT_IN",
        "OPERATOR_CONTAINS_ONE",
        "OPERATOR_CONTAINS_ALL"
      ]
    },
    "v1OrganizationData": {
      "type": "object",
      "properties": {
        "organizationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1User"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Policy"
          }
        },
        "privateKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PrivateKey"
          }
        },
        "invitations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Invitation"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/datav1Tag"
          }
        },
        "rootQuorum": {
          "$ref": "#/definitions/externaldatav1Quorum"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Feature"
          }
        },
        "wallets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Wallet"
          }
        }
      }
    },
    "v1OtpAuthIntent": {
      "type": "object",
      "properties": {
        "otpId": {
          "type": "string",
          "description": "ID representing the result of an init OTP activity."
        },
        "otpCode": {
          "type": "string",
          "description": "6 digit OTP code sent out to a user's contact (email or SMS)"
        },
        "targetPublicKey": {
          "type": "string",
          "description": "Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted."
        },
        "apiKeyName": {
          "type": "string",
          "description": "Optional human-readable name for an API Key. If none provided, default to OTP Auth - \u003cTimestamp\u003e"
        },
        "expirationSeconds": {
          "type": "string",
          "description": "Expiration window (in seconds) indicating how long the API key is valid. If not provided, a default of 15 minutes will be used."
        },
        "invalidateExisting": {
          "type": "boolean",
          "description": "Invalidate all other previously generated OTP Auth API keys"
        }
      },
      "required": ["otpId", "otpCode"]
    },
    "v1OtpAuthRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_OTP_AUTH"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1OtpAuthIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1OtpAuthResult": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for the authenticating User."
        },
        "apiKeyId": {
          "type": "string",
          "description": "Unique identifier for the created API key."
        },
        "credentialBundle": {
          "type": "string",
          "description": "HPKE encrypted credential bundle"
        }
      },
      "required": ["userId"]
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "string",
          "description": "A limit of the number of object to be returned, between 1 and 100. Defaults to 10."
        },
        "before": {
          "type": "string",
          "description": "A pagination cursor. This is an object ID that enables you to fetch all objects before this ID."
        },
        "after": {
          "type": "string",
          "description": "A pagination cursor. This is an object ID that enables you to fetch all objects after this ID."
        }
      }
    },
    "v1PathFormat": {
      "type": "string",
      "enum": ["PATH_FORMAT_BIP32"]
    },
    "v1PayloadEncoding": {
      "type": "string",
      "enum": ["PAYLOAD_ENCODING_HEXADECIMAL", "PAYLOAD_ENCODING_TEXT_UTF8"]
    },
    "v1Policy": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        },
        "policyName": {
          "type": "string",
          "description": "Human-readable name for a Policy."
        },
        "effect": {
          "$ref": "#/definitions/v1Effect",
          "description": "The instruction to DENY or ALLOW a particular activity following policy selector(s)."
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "notes": {
          "type": "string",
          "description": "Human-readable notes added by a User to describe a particular policy."
        },
        "consensus": {
          "type": "string",
          "description": "A consensus expression that evalutes to true or false."
        },
        "condition": {
          "type": "string",
          "description": "A condition expression that evalutes to true or false."
        }
      },
      "required": [
        "policyId",
        "policyName",
        "effect",
        "createdAt",
        "updatedAt",
        "notes",
        "consensus",
        "condition"
      ]
    },
    "v1PrivateKey": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        },
        "publicKey": {
          "type": "string",
          "description": "The public component of a cryptographic key pair used to sign messages and transactions."
        },
        "privateKeyName": {
          "type": "string",
          "description": "Human-readable name for a Private Key."
        },
        "curve": {
          "$ref": "#/definitions/v1Curve",
          "description": "Cryptographic Curve used to generate a given Private Key."
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/externaldatav1Address"
          },
          "description": "Derived cryptocurrency addresses for a given Private Key."
        },
        "privateKeyTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key Tag IDs."
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "exported": {
          "type": "boolean",
          "description": "True when a given Private Key is exported, false otherwise."
        },
        "imported": {
          "type": "boolean",
          "description": "True when a given Private Key is imported, false otherwise."
        }
      },
      "required": [
        "privateKeyId",
        "publicKey",
        "privateKeyName",
        "curve",
        "addresses",
        "privateKeyTags",
        "createdAt",
        "updatedAt",
        "exported",
        "imported"
      ]
    },
    "v1PrivateKeyParams": {
      "type": "object",
      "properties": {
        "privateKeyName": {
          "type": "string",
          "description": "Human-readable name for a Private Key."
        },
        "curve": {
          "$ref": "#/definitions/v1Curve",
          "description": "Cryptographic Curve used to generate a given Private Key."
        },
        "privateKeyTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key Tag IDs."
        },
        "addressFormats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AddressFormat"
          },
          "description": "Cryptocurrency-specific formats for a derived address (e.g., Ethereum)."
        }
      },
      "required": [
        "privateKeyName",
        "curve",
        "privateKeyTags",
        "addressFormats"
      ]
    },
    "v1PrivateKeyResult": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/immutableactivityv1Address"
          }
        }
      }
    },
    "v1PublicKeyCredentialWithAttestation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["public-key"]
        },
        "rawId": {
          "type": "string"
        },
        "authenticatorAttachment": {
          "type": "string",
          "enum": ["cross-platform", "platform"],
          "x-nullable": true
        },
        "response": {
          "$ref": "#/definitions/v1AuthenticatorAttestationResponse"
        },
        "clientExtensionResults": {
          "$ref": "#/definitions/v1SimpleClientExtensionResults"
        }
      },
      "required": ["id", "type", "rawId", "response", "clientExtensionResults"]
    },
    "v1RecoverUserIntent": {
      "type": "object",
      "properties": {
        "authenticator": {
          "$ref": "#/definitions/v1AuthenticatorParamsV2",
          "description": "The new authenticator to register."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for the user performing recovery."
        }
      },
      "required": ["authenticator", "userId"]
    },
    "v1RecoverUserRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_RECOVER_USER"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1RecoverUserIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1RecoverUserResult": {
      "type": "object",
      "properties": {
        "authenticatorId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "ID of the authenticator created."
        }
      },
      "required": ["authenticatorId"]
    },
    "v1RejectActivityIntent": {
      "type": "object",
      "properties": {
        "fingerprint": {
          "type": "string",
          "description": "An artifact verifying a User's action."
        }
      },
      "required": ["fingerprint"]
    },
    "v1RejectActivityRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_REJECT_ACTIVITY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1RejectActivityIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1RemoveOrganizationFeatureIntent": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FeatureName",
          "description": "Name of the feature to remove"
        }
      },
      "required": ["name"]
    },
    "v1RemoveOrganizationFeatureRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1RemoveOrganizationFeatureIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1RemoveOrganizationFeatureResult": {
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Feature"
          },
          "description": "Resulting list of organization features."
        }
      },
      "required": ["features"]
    },
    "v1Result": {
      "type": "object",
      "properties": {
        "createOrganizationResult": {
          "$ref": "#/definitions/v1CreateOrganizationResult"
        },
        "createAuthenticatorsResult": {
          "$ref": "#/definitions/v1CreateAuthenticatorsResult"
        },
        "createUsersResult": {
          "$ref": "#/definitions/v1CreateUsersResult"
        },
        "createPrivateKeysResult": {
          "$ref": "#/definitions/v1CreatePrivateKeysResult"
        },
        "createInvitationsResult": {
          "$ref": "#/definitions/v1CreateInvitationsResult"
        },
        "acceptInvitationResult": {
          "$ref": "#/definitions/v1AcceptInvitationResult"
        },
        "signRawPayloadResult": {
          "$ref": "#/definitions/v1SignRawPayloadResult"
        },
        "createPolicyResult": {
          "$ref": "#/definitions/v1CreatePolicyResult"
        },
        "disablePrivateKeyResult": {
          "$ref": "#/definitions/v1DisablePrivateKeyResult"
        },
        "deleteUsersResult": {
          "$ref": "#/definitions/v1DeleteUsersResult"
        },
        "deleteAuthenticatorsResult": {
          "$ref": "#/definitions/v1DeleteAuthenticatorsResult"
        },
        "deleteInvitationResult": {
          "$ref": "#/definitions/v1DeleteInvitationResult"
        },
        "deleteOrganizationResult": {
          "$ref": "#/definitions/v1DeleteOrganizationResult"
        },
        "deletePolicyResult": {
          "$ref": "#/definitions/v1DeletePolicyResult"
        },
        "createUserTagResult": {
          "$ref": "#/definitions/v1CreateUserTagResult"
        },
        "deleteUserTagsResult": {
          "$ref": "#/definitions/v1DeleteUserTagsResult"
        },
        "signTransactionResult": {
          "$ref": "#/definitions/v1SignTransactionResult"
        },
        "deleteApiKeysResult": {
          "$ref": "#/definitions/v1DeleteApiKeysResult"
        },
        "createApiKeysResult": {
          "$ref": "#/definitions/v1CreateApiKeysResult"
        },
        "createPrivateKeyTagResult": {
          "$ref": "#/definitions/v1CreatePrivateKeyTagResult"
        },
        "deletePrivateKeyTagsResult": {
          "$ref": "#/definitions/v1DeletePrivateKeyTagsResult"
        },
        "setPaymentMethodResult": {
          "$ref": "#/definitions/billingSetPaymentMethodResult"
        },
        "activateBillingTierResult": {
          "$ref": "#/definitions/billingActivateBillingTierResult"
        },
        "deletePaymentMethodResult": {
          "$ref": "#/definitions/billingDeletePaymentMethodResult"
        },
        "createApiOnlyUsersResult": {
          "$ref": "#/definitions/v1CreateApiOnlyUsersResult"
        },
        "updateRootQuorumResult": {
          "$ref": "#/definitions/v1UpdateRootQuorumResult"
        },
        "updateUserTagResult": {
          "$ref": "#/definitions/v1UpdateUserTagResult"
        },
        "updatePrivateKeyTagResult": {
          "$ref": "#/definitions/v1UpdatePrivateKeyTagResult"
        },
        "createSubOrganizationResult": {
          "$ref": "#/definitions/v1CreateSubOrganizationResult"
        },
        "updateAllowedOriginsResult": {
          "$ref": "#/definitions/v1UpdateAllowedOriginsResult"
        },
        "createPrivateKeysResultV2": {
          "$ref": "#/definitions/v1CreatePrivateKeysResultV2"
        },
        "updateUserResult": {
          "$ref": "#/definitions/v1UpdateUserResult"
        },
        "updatePolicyResult": {
          "$ref": "#/definitions/v1UpdatePolicyResult"
        },
        "createSubOrganizationResultV3": {
          "$ref": "#/definitions/v1CreateSubOrganizationResultV3"
        },
        "createWalletResult": {
          "$ref": "#/definitions/v1CreateWalletResult"
        },
        "createWalletAccountsResult": {
          "$ref": "#/definitions/v1CreateWalletAccountsResult"
        },
        "initUserEmailRecoveryResult": {
          "$ref": "#/definitions/v1InitUserEmailRecoveryResult"
        },
        "recoverUserResult": {
          "$ref": "#/definitions/v1RecoverUserResult"
        },
        "setOrganizationFeatureResult": {
          "$ref": "#/definitions/v1SetOrganizationFeatureResult"
        },
        "removeOrganizationFeatureResult": {
          "$ref": "#/definitions/v1RemoveOrganizationFeatureResult"
        },
        "exportPrivateKeyResult": {
          "$ref": "#/definitions/v1ExportPrivateKeyResult"
        },
        "exportWalletResult": {
          "$ref": "#/definitions/v1ExportWalletResult"
        },
        "createSubOrganizationResultV4": {
          "$ref": "#/definitions/v1CreateSubOrganizationResultV4"
        },
        "emailAuthResult": {
          "$ref": "#/definitions/v1EmailAuthResult"
        },
        "exportWalletAccountResult": {
          "$ref": "#/definitions/v1ExportWalletAccountResult"
        },
        "initImportWalletResult": {
          "$ref": "#/definitions/v1InitImportWalletResult"
        },
        "importWalletResult": {
          "$ref": "#/definitions/v1ImportWalletResult"
        },
        "initImportPrivateKeyResult": {
          "$ref": "#/definitions/v1InitImportPrivateKeyResult"
        },
        "importPrivateKeyResult": {
          "$ref": "#/definitions/v1ImportPrivateKeyResult"
        },
        "createPoliciesResult": {
          "$ref": "#/definitions/v1CreatePoliciesResult"
        },
        "signRawPayloadsResult": {
          "$ref": "#/definitions/v1SignRawPayloadsResult"
        },
        "createReadOnlySessionResult": {
          "$ref": "#/definitions/v1CreateReadOnlySessionResult"
        },
        "createOauthProvidersResult": {
          "$ref": "#/definitions/v1CreateOauthProvidersResult"
        },
        "deleteOauthProvidersResult": {
          "$ref": "#/definitions/v1DeleteOauthProvidersResult"
        },
        "createSubOrganizationResultV5": {
          "$ref": "#/definitions/v1CreateSubOrganizationResultV5"
        },
        "oauthResult": {
          "$ref": "#/definitions/v1OauthResult"
        },
        "createReadWriteSessionResult": {
          "$ref": "#/definitions/v1CreateReadWriteSessionResult"
        },
        "createSubOrganizationResultV6": {
          "$ref": "#/definitions/v1CreateSubOrganizationResultV6"
        },
        "deletePrivateKeysResult": {
          "$ref": "#/definitions/v1DeletePrivateKeysResult"
        },
        "deleteWalletsResult": {
          "$ref": "#/definitions/v1DeleteWalletsResult"
        },
        "createReadWriteSessionResultV2": {
          "$ref": "#/definitions/v1CreateReadWriteSessionResultV2"
        },
        "deleteSubOrganizationResult": {
          "$ref": "#/definitions/v1DeleteSubOrganizationResult"
        },
        "initOtpAuthResult": {
          "$ref": "#/definitions/v1InitOtpAuthResult"
        },
        "otpAuthResult": {
          "$ref": "#/definitions/v1OtpAuthResult"
        },
        "createSubOrganizationResultV7": {
          "$ref": "#/definitions/v1CreateSubOrganizationResultV7"
        }
      }
    },
    "v1RootUserParams": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address."
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiApiKeyParams"
          },
          "description": "A list of API Key parameters."
        },
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuthenticatorParamsV2"
          },
          "description": "A list of Authenticator parameters."
        }
      },
      "required": ["userName", "apiKeys", "authenticators"]
    },
    "v1RootUserParamsV2": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address."
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiApiKeyParams"
          },
          "description": "A list of API Key parameters."
        },
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuthenticatorParamsV2"
          },
          "description": "A list of Authenticator parameters."
        },
        "oauthProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OauthProviderParams"
          },
          "description": "A list of Oauth providers."
        }
      },
      "required": ["userName", "apiKeys", "authenticators", "oauthProviders"]
    },
    "v1RootUserParamsV3": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address."
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ApiKeyParamsV2"
          },
          "description": "A list of API Key parameters."
        },
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuthenticatorParamsV2"
          },
          "description": "A list of Authenticator parameters."
        },
        "oauthProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OauthProviderParams"
          },
          "description": "A list of Oauth providers."
        }
      },
      "required": ["userName", "apiKeys", "authenticators", "oauthProviders"]
    },
    "v1RootUserParamsV4": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address."
        },
        "userPhoneNumber": {
          "type": "string",
          "description": "The user's phone number in E.164 format e.g. +13214567890"
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ApiKeyParamsV2"
          },
          "description": "A list of API Key parameters."
        },
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuthenticatorParamsV2"
          },
          "description": "A list of Authenticator parameters."
        },
        "oauthProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OauthProviderParams"
          },
          "description": "A list of Oauth providers."
        }
      },
      "required": ["userName", "apiKeys", "authenticators", "oauthProviders"]
    },
    "v1Selector": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/v1Operator"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "v1SelectorV2": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/v1Operator"
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SetOrganizationFeatureIntent": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1FeatureName",
          "description": "Name of the feature to set"
        },
        "value": {
          "type": "string",
          "description": "Optional value for the feature. Will override existing values if feature is already set."
        }
      },
      "required": ["name", "value"]
    },
    "v1SetOrganizationFeatureRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1SetOrganizationFeatureIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1SetOrganizationFeatureResult": {
      "type": "object",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Feature"
          },
          "description": "Resulting list of organization features."
        }
      },
      "required": ["features"]
    },
    "v1SignRawPayloadIntent": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        },
        "payload": {
          "type": "string",
          "description": "Raw unsigned payload to be signed."
        },
        "encoding": {
          "$ref": "#/definitions/v1PayloadEncoding",
          "description": "Encoding of the `payload` string. Turnkey uses this information to convert `payload` into bytes with the correct decoder (e.g. hex, utf8)."
        },
        "hashFunction": {
          "$ref": "#/definitions/v1HashFunction",
          "description": "Hash function to apply to payload bytes before signing. This field must be set to HASH_FUNCTION_NOT_APPLICABLE for EdDSA/ed25519 signature requests; configurable payload hashing is not supported by RFC 8032."
        }
      },
      "required": ["privateKeyId", "payload", "encoding", "hashFunction"]
    },
    "v1SignRawPayloadIntentV2": {
      "type": "object",
      "properties": {
        "signWith": {
          "type": "string",
          "description": "A Wallet account address, Private Key address, or Private Key identifier."
        },
        "payload": {
          "type": "string",
          "description": "Raw unsigned payload to be signed."
        },
        "encoding": {
          "$ref": "#/definitions/v1PayloadEncoding",
          "description": "Encoding of the `payload` string. Turnkey uses this information to convert `payload` into bytes with the correct decoder (e.g. hex, utf8)."
        },
        "hashFunction": {
          "$ref": "#/definitions/v1HashFunction",
          "description": "Hash function to apply to payload bytes before signing. This field must be set to HASH_FUNCTION_NOT_APPLICABLE for EdDSA/ed25519 signature requests; configurable payload hashing is not supported by RFC 8032."
        }
      },
      "required": ["signWith", "payload", "encoding", "hashFunction"]
    },
    "v1SignRawPayloadRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1SignRawPayloadIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1SignRawPayloadResult": {
      "type": "object",
      "properties": {
        "r": {
          "type": "string",
          "description": "Component of an ECSDA signature."
        },
        "s": {
          "type": "string",
          "description": "Component of an ECSDA signature."
        },
        "v": {
          "type": "string",
          "description": "Component of an ECSDA signature."
        }
      },
      "required": ["r", "s", "v"]
    },
    "v1SignRawPayloadsIntent": {
      "type": "object",
      "properties": {
        "signWith": {
          "type": "string",
          "description": "A Wallet account address, Private Key address, or Private Key identifier."
        },
        "payloads": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of raw unsigned payloads to be signed."
        },
        "encoding": {
          "$ref": "#/definitions/v1PayloadEncoding",
          "description": "Encoding of the `payload` string. Turnkey uses this information to convert `payload` into bytes with the correct decoder (e.g. hex, utf8)."
        },
        "hashFunction": {
          "$ref": "#/definitions/v1HashFunction",
          "description": "Hash function to apply to payload bytes before signing. This field must be set to HASH_FUNCTION_NOT_APPLICABLE for EdDSA/ed25519 signature requests; configurable payload hashing is not supported by RFC 8032."
        }
      },
      "required": ["signWith", "payloads", "encoding", "hashFunction"]
    },
    "v1SignRawPayloadsRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_SIGN_RAW_PAYLOADS"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1SignRawPayloadsIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1SignRawPayloadsResult": {
      "type": "object",
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SignRawPayloadResult"
          }
        }
      }
    },
    "v1SignTransactionIntent": {
      "type": "object",
      "properties": {
        "privateKeyId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key."
        },
        "unsignedTransaction": {
          "type": "string",
          "description": "Raw unsigned transaction to be signed by a particular Private Key."
        },
        "type": {
          "$ref": "#/definitions/v1TransactionType"
        }
      },
      "required": ["privateKeyId", "unsignedTransaction", "type"]
    },
    "v1SignTransactionIntentV2": {
      "type": "object",
      "properties": {
        "signWith": {
          "type": "string",
          "description": "A Wallet account address, Private Key address, or Private Key identifier."
        },
        "unsignedTransaction": {
          "type": "string",
          "description": "Raw unsigned transaction to be signed"
        },
        "type": {
          "$ref": "#/definitions/v1TransactionType"
        }
      },
      "required": ["signWith", "unsignedTransaction", "type"]
    },
    "v1SignTransactionRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_SIGN_TRANSACTION_V2"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1SignTransactionIntentV2"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1SignTransactionResult": {
      "type": "object",
      "properties": {
        "signedTransaction": {
          "type": "string"
        }
      },
      "required": ["signedTransaction"]
    },
    "v1SimpleClientExtensionResults": {
      "type": "object",
      "properties": {
        "appid": {
          "type": "boolean"
        },
        "appidExclude": {
          "type": "boolean"
        },
        "credProps": {
          "$ref": "#/definitions/v1CredPropsAuthenticationExtensionsClientOutputs"
        }
      }
    },
    "v1SmsCustomizationParams": {
      "type": "object",
      "properties": {
        "template": {
          "type": "string",
          "description": "Template containing references to .OtpCode i.e Your OTP is {{.OtpCode}}"
        }
      }
    },
    "v1TagType": {
      "type": "string",
      "enum": ["TAG_TYPE_USER", "TAG_TYPE_PRIVATE_KEY"]
    },
    "v1TransactionType": {
      "type": "string",
      "enum": ["TRANSACTION_TYPE_ETHEREUM", "TRANSACTION_TYPE_SOLANA"]
    },
    "v1UpdateAllowedOriginsIntent": {
      "type": "object",
      "properties": {
        "allowedOrigins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional origins requests are allowed from besides Turnkey origins"
        }
      },
      "required": ["allowedOrigins"]
    },
    "v1UpdateAllowedOriginsResult": {
      "type": "object"
    },
    "v1UpdatePolicyIntent": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        },
        "policyName": {
          "type": "string",
          "description": "Human-readable name for a Policy."
        },
        "policyEffect": {
          "$ref": "#/definitions/v1Effect",
          "description": "The instruction to DENY or ALLOW an activity (optional)."
        },
        "policyCondition": {
          "type": "string",
          "description": "The condition expression that triggers the Effect (optional)."
        },
        "policyConsensus": {
          "type": "string",
          "description": "The consensus expression that triggers the Effect (optional)."
        },
        "policyNotes": {
          "type": "string",
          "description": "Accompanying notes for a Policy (optional)."
        }
      },
      "required": ["policyId"]
    },
    "v1UpdatePolicyRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_UPDATE_POLICY"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1UpdatePolicyIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1UpdatePolicyResult": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string",
          "description": "Unique identifier for a given Policy."
        }
      },
      "required": ["policyId"]
    },
    "v1UpdatePrivateKeyTagIntent": {
      "type": "object",
      "properties": {
        "privateKeyTagId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key Tag."
        },
        "newPrivateKeyTagName": {
          "type": "string",
          "description": "The new, human-readable name for the tag with the given ID."
        },
        "addPrivateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Keys IDs to add this tag to."
        },
        "removePrivateKeyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of Private Key IDs to remove this tag from."
        }
      },
      "required": ["privateKeyTagId", "addPrivateKeyIds", "removePrivateKeyIds"]
    },
    "v1UpdatePrivateKeyTagRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1UpdatePrivateKeyTagIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1UpdatePrivateKeyTagResult": {
      "type": "object",
      "properties": {
        "privateKeyTagId": {
          "type": "string",
          "description": "Unique identifier for a given Private Key Tag."
        }
      },
      "required": ["privateKeyTagId"]
    },
    "v1UpdateRootQuorumIntent": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "integer",
          "format": "int32",
          "description": "The threshold of unique approvals to reach quorum."
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The unique identifiers of users who comprise the quorum set."
        }
      },
      "required": ["threshold", "userIds"]
    },
    "v1UpdateRootQuorumRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_UPDATE_ROOT_QUORUM"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1UpdateRootQuorumIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1UpdateRootQuorumResult": {
      "type": "object"
    },
    "v1UpdateUserIntent": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address."
        },
        "userTagIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An updated list of User Tags to apply to this User."
        },
        "userPhoneNumber": {
          "type": "string",
          "description": "The user's phone number in E.164 format e.g. +13214567890"
        }
      },
      "required": ["userId"]
    },
    "v1UpdateUserRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_UPDATE_USER"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1UpdateUserIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1UpdateUserResult": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "A User ID."
        }
      },
      "required": ["userId"]
    },
    "v1UpdateUserTagIntent": {
      "type": "object",
      "properties": {
        "userTagId": {
          "type": "string",
          "description": "Unique identifier for a given User Tag."
        },
        "newUserTagName": {
          "type": "string",
          "description": "The new, human-readable name for the tag with the given ID."
        },
        "addUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs to add this tag to."
        },
        "removeUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User IDs to remove this tag from."
        }
      },
      "required": ["userTagId", "addUserIds", "removeUserIds"]
    },
    "v1UpdateUserTagRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["ACTIVITY_TYPE_UPDATE_USER_TAG"]
        },
        "timestampMs": {
          "type": "string",
          "description": "Timestamp (in milliseconds) of the request, used to verify liveness of user requests."
        },
        "organizationId": {
          "type": "string",
          "description": "Unique identifier for a given Organization."
        },
        "parameters": {
          "$ref": "#/definitions/v1UpdateUserTagIntent"
        }
      },
      "required": ["type", "timestampMs", "organizationId", "parameters"]
    },
    "v1UpdateUserTagResult": {
      "type": "object",
      "properties": {
        "userTagId": {
          "type": "string",
          "description": "Unique identifier for a given User Tag."
        }
      },
      "required": ["userTagId"]
    },
    "v1User": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address."
        },
        "userPhoneNumber": {
          "type": "string",
          "description": "The user's phone number in E.164 format e.g. +13214567890"
        },
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Authenticator"
          },
          "description": "A list of Authenticator parameters."
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ApiKey"
          },
          "description": "A list of API Key parameters."
        },
        "userTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs."
        },
        "oauthProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OauthProvider"
          },
          "description": "A list of Oauth Providers."
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        }
      },
      "required": [
        "userId",
        "userName",
        "authenticators",
        "apiKeys",
        "userTags",
        "oauthProviders",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1UserParams": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address."
        },
        "accessType": {
          "$ref": "#/definitions/v1AccessType",
          "description": "The User's permissible access method(s)."
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiApiKeyParams"
          },
          "description": "A list of API Key parameters."
        },
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuthenticatorParams"
          },
          "description": "A list of Authenticator parameters."
        },
        "userTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs."
        }
      },
      "required": [
        "userName",
        "accessType",
        "apiKeys",
        "authenticators",
        "userTags"
      ]
    },
    "v1UserParamsV2": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Human-readable name for a User."
        },
        "userEmail": {
          "type": "string",
          "description": "The user's email address."
        },
        "apiKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiApiKeyParams"
          },
          "description": "A list of API Key parameters."
        },
        "authenticators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuthenticatorParamsV2"
          },
          "description": "A list of Authenticator parameters."
        },
        "userTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of User Tag IDs."
        }
      },
      "required": ["userName", "apiKeys", "authenticators", "userTags"]
    },
    "v1Vote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for a given Vote object."
        },
        "userId": {
          "type": "string",
          "description": "Unique identifier for a given User."
        },
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "Web and/or API user within your Organization."
        },
        "activityId": {
          "type": "string",
          "description": "Unique identifier for a given Activity object."
        },
        "selection": {
          "type": "string",
          "enum": ["VOTE_SELECTION_APPROVED", "VOTE_SELECTION_REJECTED"]
        },
        "message": {
          "type": "string",
          "description": "The raw message being signed within a Vote."
        },
        "publicKey": {
          "type": "string",
          "description": "The public component of a cryptographic key pair used to sign messages and transactions."
        },
        "signature": {
          "type": "string",
          "description": "The signature applied to a particular vote."
        },
        "scheme": {
          "type": "string",
          "description": "Method used to produce a signature."
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        }
      },
      "required": [
        "id",
        "userId",
        "user",
        "activityId",
        "selection",
        "message",
        "publicKey",
        "signature",
        "scheme",
        "createdAt"
      ]
    },
    "v1Wallet": {
      "type": "object",
      "properties": {
        "walletId": {
          "type": "string",
          "description": "Unique identifier for a given Wallet."
        },
        "walletName": {
          "type": "string",
          "description": "Human-readable name for a Wallet."
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "exported": {
          "type": "boolean",
          "description": "True when a given Wallet is exported, false otherwise."
        },
        "imported": {
          "type": "boolean",
          "description": "True when a given Wallet is imported, false otherwise."
        }
      },
      "required": [
        "walletId",
        "walletName",
        "createdAt",
        "updatedAt",
        "exported",
        "imported"
      ]
    },
    "v1WalletAccount": {
      "type": "object",
      "properties": {
        "walletAccountId": {
          "type": "string",
          "description": "Unique identifier for a given Wallet Account."
        },
        "organizationId": {
          "type": "string",
          "description": "The Organization the Account belongs to."
        },
        "walletId": {
          "type": "string",
          "description": "The Wallet the Account was derived from."
        },
        "curve": {
          "$ref": "#/definitions/v1Curve",
          "description": "Cryptographic curve used to generate the Account."
        },
        "pathFormat": {
          "$ref": "#/definitions/v1PathFormat",
          "description": "Path format used to generate the Account."
        },
        "path": {
          "type": "string",
          "description": "Path used to generate the Account."
        },
        "addressFormat": {
          "$ref": "#/definitions/v1AddressFormat",
          "description": "Address format used to generate the Acccount."
        },
        "address": {
          "type": "string",
          "description": "Address generated using the Wallet seed and Account parameters."
        },
        "createdAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        },
        "updatedAt": {
          "$ref": "#/definitions/externaldatav1Timestamp"
        }
      },
      "required": [
        "walletAccountId",
        "organizationId",
        "walletId",
        "curve",
        "pathFormat",
        "path",
        "addressFormat",
        "address",
        "createdAt",
        "updatedAt"
      ]
    },
    "v1WalletAccountParams": {
      "type": "object",
      "properties": {
        "curve": {
          "$ref": "#/definitions/v1Curve",
          "description": "Cryptographic curve used to generate a wallet Account."
        },
        "pathFormat": {
          "$ref": "#/definitions/v1PathFormat",
          "description": "Path format used to generate a wallet Account."
        },
        "path": {
          "type": "string",
          "description": "Path used to generate a wallet Account."
        },
        "addressFormat": {
          "$ref": "#/definitions/v1AddressFormat",
          "description": "Address format used to generate a wallet Acccount."
        }
      },
      "required": ["curve", "pathFormat", "path", "addressFormat"]
    },
    "v1WalletParams": {
      "type": "object",
      "properties": {
        "walletName": {
          "type": "string",
          "description": "Human-readable name for a Wallet."
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WalletAccountParams"
          },
          "description": "A list of wallet Accounts."
        },
        "mnemonicLength": {
          "type": "integer",
          "format": "int32",
          "description": "Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24."
        }
      },
      "required": ["walletName", "accounts"]
    },
    "v1WalletResult": {
      "type": "object",
      "properties": {
        "walletId": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of account addresses."
        }
      },
      "required": ["walletId", "addresses"]
    },
    "v1WebAuthnStamp": {
      "type": "object",
      "properties": {
        "credentialId": {
          "type": "string",
          "description": "A base64 url encoded Unique identifier for a given credential."
        },
        "clientDataJson": {
          "type": "string",
          "description": "A base64 encoded payload containing metadata about the signing context and the challenge."
        },
        "authenticatorData": {
          "type": "string",
          "description": "A base64 encoded payload containing metadata about the authenticator."
        },
        "signature": {
          "type": "string",
          "description": "The base64 url encoded signature bytes contained within the WebAuthn assertion response."
        }
      },
      "required": [
        "credentialId",
        "clientDataJson",
        "authenticatorData",
        "signature"
      ]
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-Stamp",
      "in": "header"
    },
    "AuthenticatorAuth": {
      "type": "apiKey",
      "name": "X-Stamp-WebAuthn",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "AuthenticatorAuth": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "ORGANIZATIONS",
      "tags": ["Organizations", "Invitations", "Policies", "Features"]
    },
    {
      "name": "WALLETS AND PRIVATE KEYS",
      "tags": ["Wallets", "Signing", "Private Keys", "Private Key Tags"]
    },
    {
      "name": "USERS",
      "tags": ["Users", "User Tags", "User Recovery", "User Auth"]
    },
    {
      "name": "CREDENTIALS",
      "tags": ["Authenticators", "API Keys", "Sessions"]
    },
    {
      "name": "ACTIVITIES",
      "tags": ["Activities", "Consensus"]
    }
  ]
}
