/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */

import {
  fetch,
  GrpcStatus,
  THttpConfig,
  TSignedRequest,
  TStamper,
  TurnkeyRequestError,
} from "../../../../../base";
import { VERSION } from "../../../../../version";
import type {
  TGetActivityBody,
  TGetActivityResponse,
} from "./public_api.fetcher";
import type { TGetApiKeyBody, TGetApiKeyResponse } from "./public_api.fetcher";
import type {
  TGetApiKeysBody,
  TGetApiKeysResponse,
} from "./public_api.fetcher";
import type {
  TGetAttestationDocumentBody,
  TGetAttestationDocumentResponse,
} from "./public_api.fetcher";
import type {
  TGetAuthenticatorBody,
  TGetAuthenticatorResponse,
} from "./public_api.fetcher";
import type {
  TGetAuthenticatorsBody,
  TGetAuthenticatorsResponse,
} from "./public_api.fetcher";
import type {
  TGetOauthProvidersBody,
  TGetOauthProvidersResponse,
} from "./public_api.fetcher";
import type {
  TGetOrganizationBody,
  TGetOrganizationResponse,
} from "./public_api.fetcher";
import type {
  TGetOrganizationConfigsBody,
  TGetOrganizationConfigsResponse,
} from "./public_api.fetcher";
import type { TGetPolicyBody, TGetPolicyResponse } from "./public_api.fetcher";
import type {
  TGetPrivateKeyBody,
  TGetPrivateKeyResponse,
} from "./public_api.fetcher";
import type { TGetUserBody, TGetUserResponse } from "./public_api.fetcher";
import type { TGetWalletBody, TGetWalletResponse } from "./public_api.fetcher";
import type {
  TGetWalletAccountBody,
  TGetWalletAccountResponse,
} from "./public_api.fetcher";
import type {
  TGetActivitiesBody,
  TGetActivitiesResponse,
} from "./public_api.fetcher";
import type {
  TGetPoliciesBody,
  TGetPoliciesResponse,
} from "./public_api.fetcher";
import type {
  TListPrivateKeyTagsBody,
  TListPrivateKeyTagsResponse,
} from "./public_api.fetcher";
import type {
  TGetPrivateKeysBody,
  TGetPrivateKeysResponse,
} from "./public_api.fetcher";
import type {
  TGetSubOrgIdsBody,
  TGetSubOrgIdsResponse,
} from "./public_api.fetcher";
import type {
  TListUserTagsBody,
  TListUserTagsResponse,
} from "./public_api.fetcher";
import type { TGetUsersBody, TGetUsersResponse } from "./public_api.fetcher";
import type {
  TGetVerifiedSubOrgIdsBody,
  TGetVerifiedSubOrgIdsResponse,
} from "./public_api.fetcher";
import type {
  TGetWalletAccountsBody,
  TGetWalletAccountsResponse,
} from "./public_api.fetcher";
import type {
  TGetWalletsBody,
  TGetWalletsResponse,
} from "./public_api.fetcher";
import type { TGetWhoamiBody, TGetWhoamiResponse } from "./public_api.fetcher";
import type {
  TApproveActivityBody,
  TApproveActivityResponse,
} from "./public_api.fetcher";
import type {
  TCreateApiKeysBody,
  TCreateApiKeysResponse,
} from "./public_api.fetcher";
import type {
  TCreateApiOnlyUsersBody,
  TCreateApiOnlyUsersResponse,
} from "./public_api.fetcher";
import type {
  TCreateAuthenticatorsBody,
  TCreateAuthenticatorsResponse,
} from "./public_api.fetcher";
import type {
  TCreateInvitationsBody,
  TCreateInvitationsResponse,
} from "./public_api.fetcher";
import type {
  TCreateOauthProvidersBody,
  TCreateOauthProvidersResponse,
} from "./public_api.fetcher";
import type {
  TCreatePoliciesBody,
  TCreatePoliciesResponse,
} from "./public_api.fetcher";
import type {
  TCreatePolicyBody,
  TCreatePolicyResponse,
} from "./public_api.fetcher";
import type {
  TCreatePrivateKeyTagBody,
  TCreatePrivateKeyTagResponse,
} from "./public_api.fetcher";
import type {
  TCreatePrivateKeysBody,
  TCreatePrivateKeysResponse,
} from "./public_api.fetcher";
import type {
  TCreateReadOnlySessionBody,
  TCreateReadOnlySessionResponse,
} from "./public_api.fetcher";
import type {
  TCreateReadWriteSessionBody,
  TCreateReadWriteSessionResponse,
} from "./public_api.fetcher";
import type {
  TCreateSubOrganizationBody,
  TCreateSubOrganizationResponse,
} from "./public_api.fetcher";
import type {
  TCreateUserTagBody,
  TCreateUserTagResponse,
} from "./public_api.fetcher";
import type {
  TCreateUsersBody,
  TCreateUsersResponse,
} from "./public_api.fetcher";
import type {
  TCreateWalletBody,
  TCreateWalletResponse,
} from "./public_api.fetcher";
import type {
  TCreateWalletAccountsBody,
  TCreateWalletAccountsResponse,
} from "./public_api.fetcher";
import type {
  TDeleteApiKeysBody,
  TDeleteApiKeysResponse,
} from "./public_api.fetcher";
import type {
  TDeleteAuthenticatorsBody,
  TDeleteAuthenticatorsResponse,
} from "./public_api.fetcher";
import type {
  TDeleteInvitationBody,
  TDeleteInvitationResponse,
} from "./public_api.fetcher";
import type {
  TDeleteOauthProvidersBody,
  TDeleteOauthProvidersResponse,
} from "./public_api.fetcher";
import type {
  TDeletePolicyBody,
  TDeletePolicyResponse,
} from "./public_api.fetcher";
import type {
  TDeletePrivateKeyTagsBody,
  TDeletePrivateKeyTagsResponse,
} from "./public_api.fetcher";
import type {
  TDeletePrivateKeysBody,
  TDeletePrivateKeysResponse,
} from "./public_api.fetcher";
import type {
  TDeleteSubOrganizationBody,
  TDeleteSubOrganizationResponse,
} from "./public_api.fetcher";
import type {
  TDeleteUserTagsBody,
  TDeleteUserTagsResponse,
} from "./public_api.fetcher";
import type {
  TDeleteUsersBody,
  TDeleteUsersResponse,
} from "./public_api.fetcher";
import type {
  TDeleteWalletsBody,
  TDeleteWalletsResponse,
} from "./public_api.fetcher";
import type { TEmailAuthBody, TEmailAuthResponse } from "./public_api.fetcher";
import type {
  TExportPrivateKeyBody,
  TExportPrivateKeyResponse,
} from "./public_api.fetcher";
import type {
  TExportWalletBody,
  TExportWalletResponse,
} from "./public_api.fetcher";
import type {
  TExportWalletAccountBody,
  TExportWalletAccountResponse,
} from "./public_api.fetcher";
import type {
  TImportPrivateKeyBody,
  TImportPrivateKeyResponse,
} from "./public_api.fetcher";
import type {
  TImportWalletBody,
  TImportWalletResponse,
} from "./public_api.fetcher";
import type {
  TInitImportPrivateKeyBody,
  TInitImportPrivateKeyResponse,
} from "./public_api.fetcher";
import type {
  TInitImportWalletBody,
  TInitImportWalletResponse,
} from "./public_api.fetcher";
import type {
  TInitOtpAuthBody,
  TInitOtpAuthResponse,
} from "./public_api.fetcher";
import type {
  TInitUserEmailRecoveryBody,
  TInitUserEmailRecoveryResponse,
} from "./public_api.fetcher";
import type { TOauthBody, TOauthResponse } from "./public_api.fetcher";
import type { TOtpAuthBody, TOtpAuthResponse } from "./public_api.fetcher";
import type {
  TRecoverUserBody,
  TRecoverUserResponse,
} from "./public_api.fetcher";
import type {
  TRejectActivityBody,
  TRejectActivityResponse,
} from "./public_api.fetcher";
import type {
  TRemoveOrganizationFeatureBody,
  TRemoveOrganizationFeatureResponse,
} from "./public_api.fetcher";
import type {
  TSetOrganizationFeatureBody,
  TSetOrganizationFeatureResponse,
} from "./public_api.fetcher";
import type {
  TSignRawPayloadBody,
  TSignRawPayloadResponse,
} from "./public_api.fetcher";
import type {
  TSignRawPayloadsBody,
  TSignRawPayloadsResponse,
} from "./public_api.fetcher";
import type {
  TSignTransactionBody,
  TSignTransactionResponse,
} from "./public_api.fetcher";
import type {
  TUpdatePolicyBody,
  TUpdatePolicyResponse,
} from "./public_api.fetcher";
import type {
  TUpdatePrivateKeyTagBody,
  TUpdatePrivateKeyTagResponse,
} from "./public_api.fetcher";
import type {
  TUpdateRootQuorumBody,
  TUpdateRootQuorumResponse,
} from "./public_api.fetcher";
import type {
  TUpdateUserBody,
  TUpdateUserResponse,
} from "./public_api.fetcher";
import type {
  TUpdateUserTagBody,
  TUpdateUserTagResponse,
} from "./public_api.fetcher";
import type {
  TUpdateWalletBody,
  TUpdateWalletResponse,
} from "./public_api.fetcher";
import type {
  TTestRateLimitsBody,
  TTestRateLimitsResponse,
} from "./public_api.fetcher";

export class TurnkeyClient {
  config: THttpConfig;
  stamper: TStamper;

  constructor(config: THttpConfig, stamper: TStamper) {
    if (!config.baseUrl) {
      throw new Error(`Missing base URL. Please verify env vars.`);
    }

    this.config = config;
    this.stamper = stamper;
  }
  async request<TBodyType, TResponseType>(
    url: string,
    body: TBodyType,
  ): Promise<TResponseType> {
    const fullUrl = this.config.baseUrl + url;
    const stringifiedBody = JSON.stringify(body);
    const stamp = await this.stamper.stamp(stringifiedBody);

    const response = await fetch(fullUrl, {
      method: "POST",
      headers: {
        [stamp.stampHeaderName]: stamp.stampHeaderValue,
        "X-Client-Version": VERSION,
      },
      body: stringifiedBody,
      redirect: "follow",
    });

    if (!response.ok) {
      let res: GrpcStatus;
      try {
        res = await response.json();
      } catch (_) {
        throw new Error(`${response.status} ${response.statusText}`);
      }

      throw new TurnkeyRequestError(res);
    }

    const data = await response.json();
    return data as TResponseType;
  }

  /**
   * Get details about an Activity
   *
   * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).
   *
   * See also {@link stampGetActivity}.
   */
  getActivity = async (
    input: TGetActivityBody,
  ): Promise<TGetActivityResponse> => {
    return this.request("/public/v1/query/get_activity", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.
   *
   * See also {@link GetActivity}.
   */
  stampGetActivity = async (
    input: TGetActivityBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_activity";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about an API key
   *
   * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).
   *
   * See also {@link stampGetApiKey}.
   */
  getApiKey = async (input: TGetApiKeyBody): Promise<TGetApiKeyResponse> => {
    return this.request("/public/v1/query/get_api_key", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.
   *
   * See also {@link GetApiKey}.
   */
  stampGetApiKey = async (input: TGetApiKeyBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_key";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about API keys for a user
   *
   * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).
   *
   * See also {@link stampGetApiKeys}.
   */
  getApiKeys = async (input: TGetApiKeysBody): Promise<TGetApiKeysResponse> => {
    return this.request("/public/v1/query/get_api_keys", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.
   *
   * See also {@link GetApiKeys}.
   */
  stampGetApiKeys = async (input: TGetApiKeysBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_api_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get the attestation document corresponding to an enclave.
   *
   * Sign the provided `TGetAttestationDocumentBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_attestation).
   *
   * See also {@link stampGetAttestationDocument}.
   */
  getAttestationDocument = async (
    input: TGetAttestationDocumentBody,
  ): Promise<TGetAttestationDocumentResponse> => {
    return this.request("/public/v1/query/get_attestation", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetAttestationDocumentBody` by using the client's `stamp` function.
   *
   * See also {@link GetAttestationDocument}.
   */
  stampGetAttestationDocument = async (
    input: TGetAttestationDocumentBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_attestation";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about an authenticator
   *
   * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).
   *
   * See also {@link stampGetAuthenticator}.
   */
  getAuthenticator = async (
    input: TGetAuthenticatorBody,
  ): Promise<TGetAuthenticatorResponse> => {
    return this.request("/public/v1/query/get_authenticator", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.
   *
   * See also {@link GetAuthenticator}.
   */
  stampGetAuthenticator = async (
    input: TGetAuthenticatorBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticator";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about authenticators for a user
   *
   * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).
   *
   * See also {@link stampGetAuthenticators}.
   */
  getAuthenticators = async (
    input: TGetAuthenticatorsBody,
  ): Promise<TGetAuthenticatorsResponse> => {
    return this.request("/public/v1/query/get_authenticators", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.
   *
   * See also {@link GetAuthenticators}.
   */
  stampGetAuthenticators = async (
    input: TGetAuthenticatorsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_authenticators";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about Oauth providers for a user
   *
   * Sign the provided `TGetOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_oauth_providers).
   *
   * See also {@link stampGetOauthProviders}.
   */
  getOauthProviders = async (
    input: TGetOauthProvidersBody,
  ): Promise<TGetOauthProvidersResponse> => {
    return this.request("/public/v1/query/get_oauth_providers", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetOauthProvidersBody` by using the client's `stamp` function.
   *
   * See also {@link GetOauthProviders}.
   */
  stampGetOauthProviders = async (
    input: TGetOauthProvidersBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/query/get_oauth_providers";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about an Organization
   *
   * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).
   *
   * See also {@link stampGetOrganization}.
   */
  getOrganization = async (
    input: TGetOrganizationBody,
  ): Promise<TGetOrganizationResponse> => {
    return this.request("/public/v1/query/get_organization", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.
   *
   * See also {@link GetOrganization}.
   */
  stampGetOrganization = async (
    input: TGetOrganizationBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_organization";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get quorum settings and features for an organization
   *
   * Sign the provided `TGetOrganizationConfigsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization_configs).
   *
   * See also {@link stampGetOrganizationConfigs}.
   */
  getOrganizationConfigs = async (
    input: TGetOrganizationConfigsBody,
  ): Promise<TGetOrganizationConfigsResponse> => {
    return this.request("/public/v1/query/get_organization_configs", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetOrganizationConfigsBody` by using the client's `stamp` function.
   *
   * See also {@link GetOrganizationConfigs}.
   */
  stampGetOrganizationConfigs = async (
    input: TGetOrganizationConfigsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/query/get_organization_configs";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about a Policy
   *
   * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).
   *
   * See also {@link stampGetPolicy}.
   */
  getPolicy = async (input: TGetPolicyBody): Promise<TGetPolicyResponse> => {
    return this.request("/public/v1/query/get_policy", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.
   *
   * See also {@link GetPolicy}.
   */
  stampGetPolicy = async (input: TGetPolicyBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_policy";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about a Private Key
   *
   * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).
   *
   * See also {@link stampGetPrivateKey}.
   */
  getPrivateKey = async (
    input: TGetPrivateKeyBody,
  ): Promise<TGetPrivateKeyResponse> => {
    return this.request("/public/v1/query/get_private_key", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.
   *
   * See also {@link GetPrivateKey}.
   */
  stampGetPrivateKey = async (
    input: TGetPrivateKeyBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_private_key";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about a User
   *
   * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).
   *
   * See also {@link stampGetUser}.
   */
  getUser = async (input: TGetUserBody): Promise<TGetUserResponse> => {
    return this.request("/public/v1/query/get_user", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.
   *
   * See also {@link GetUser}.
   */
  stampGetUser = async (input: TGetUserBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_user";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get details about a Wallet
   *
   * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).
   *
   * See also {@link stampGetWallet}.
   */
  getWallet = async (input: TGetWalletBody): Promise<TGetWalletResponse> => {
    return this.request("/public/v1/query/get_wallet", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.
   *
   * See also {@link GetWallet}.
   */
  stampGetWallet = async (input: TGetWalletBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_wallet";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get a single wallet account
   *
   * Sign the provided `TGetWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet_account).
   *
   * See also {@link stampGetWalletAccount}.
   */
  getWalletAccount = async (
    input: TGetWalletAccountBody,
  ): Promise<TGetWalletAccountResponse> => {
    return this.request("/public/v1/query/get_wallet_account", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetWalletAccountBody` by using the client's `stamp` function.
   *
   * See also {@link GetWalletAccount}.
   */
  stampGetWalletAccount = async (
    input: TGetWalletAccountBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/get_wallet_account";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * List all Activities within an Organization
   *
   * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).
   *
   * See also {@link stampGetActivities}.
   */
  getActivities = async (
    input: TGetActivitiesBody,
  ): Promise<TGetActivitiesResponse> => {
    return this.request("/public/v1/query/list_activities", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.
   *
   * See also {@link GetActivities}.
   */
  stampGetActivities = async (
    input: TGetActivitiesBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_activities";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * List all Policies within an Organization
   *
   * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).
   *
   * See also {@link stampGetPolicies}.
   */
  getPolicies = async (
    input: TGetPoliciesBody,
  ): Promise<TGetPoliciesResponse> => {
    return this.request("/public/v1/query/list_policies", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.
   *
   * See also {@link GetPolicies}.
   */
  stampGetPolicies = async (
    input: TGetPoliciesBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_policies";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * List all Private Key Tags within an Organization
   *
   * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).
   *
   * See also {@link stampListPrivateKeyTags}.
   */
  listPrivateKeyTags = async (
    input: TListPrivateKeyTagsBody,
  ): Promise<TListPrivateKeyTagsResponse> => {
    return this.request("/public/v1/query/list_private_key_tags", input);
  };

  /**
   * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.
   *
   * See also {@link ListPrivateKeyTags}.
   */
  stampListPrivateKeyTags = async (
    input: TListPrivateKeyTagsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/query/list_private_key_tags";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * List all Private Keys within an Organization
   *
   * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).
   *
   * See also {@link stampGetPrivateKeys}.
   */
  getPrivateKeys = async (
    input: TGetPrivateKeysBody,
  ): Promise<TGetPrivateKeysResponse> => {
    return this.request("/public/v1/query/list_private_keys", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.
   *
   * See also {@link GetPrivateKeys}.
   */
  stampGetPrivateKeys = async (
    input: TGetPrivateKeysBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_private_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get all suborg IDs associated given a parent org ID and an optional filter.
   *
   * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).
   *
   * See also {@link stampGetSubOrgIds}.
   */
  getSubOrgIds = async (
    input: TGetSubOrgIdsBody,
  ): Promise<TGetSubOrgIdsResponse> => {
    return this.request("/public/v1/query/list_suborgs", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.
   *
   * See also {@link GetSubOrgIds}.
   */
  stampGetSubOrgIds = async (
    input: TGetSubOrgIdsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_suborgs";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * List all User Tags within an Organization
   *
   * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).
   *
   * See also {@link stampListUserTags}.
   */
  listUserTags = async (
    input: TListUserTagsBody,
  ): Promise<TListUserTagsResponse> => {
    return this.request("/public/v1/query/list_user_tags", input);
  };

  /**
   * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.
   *
   * See also {@link ListUserTags}.
   */
  stampListUserTags = async (
    input: TListUserTagsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_user_tags";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * List all Users within an Organization
   *
   * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).
   *
   * See also {@link stampGetUsers}.
   */
  getUsers = async (input: TGetUsersBody): Promise<TGetUsersResponse> => {
    return this.request("/public/v1/query/list_users", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.
   *
   * See also {@link GetUsers}.
   */
  stampGetUsers = async (input: TGetUsersBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_users";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get all email or phone verified suborg IDs associated given a parent org ID.
   *
   * Sign the provided `TGetVerifiedSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_verified_suborgs).
   *
   * See also {@link stampGetVerifiedSubOrgIds}.
   */
  getVerifiedSubOrgIds = async (
    input: TGetVerifiedSubOrgIdsBody,
  ): Promise<TGetVerifiedSubOrgIdsResponse> => {
    return this.request("/public/v1/query/list_verified_suborgs", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetVerifiedSubOrgIdsBody` by using the client's `stamp` function.
   *
   * See also {@link GetVerifiedSubOrgIds}.
   */
  stampGetVerifiedSubOrgIds = async (
    input: TGetVerifiedSubOrgIdsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/query/list_verified_suborgs";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * List all Accounts within a Wallet
   *
   * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).
   *
   * See also {@link stampGetWalletAccounts}.
   */
  getWalletAccounts = async (
    input: TGetWalletAccountsBody,
  ): Promise<TGetWalletAccountsResponse> => {
    return this.request("/public/v1/query/list_wallet_accounts", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.
   *
   * See also {@link GetWalletAccounts}.
   */
  stampGetWalletAccounts = async (
    input: TGetWalletAccountsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/query/list_wallet_accounts";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * List all Wallets within an Organization
   *
   * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).
   *
   * See also {@link stampGetWallets}.
   */
  getWallets = async (input: TGetWalletsBody): Promise<TGetWalletsResponse> => {
    return this.request("/public/v1/query/list_wallets", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.
   *
   * See also {@link GetWallets}.
   */
  stampGetWallets = async (input: TGetWalletsBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/list_wallets";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
   *
   * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).
   *
   * See also {@link stampGetWhoami}.
   */
  getWhoami = async (input: TGetWhoamiBody): Promise<TGetWhoamiResponse> => {
    return this.request("/public/v1/query/whoami", input);
  };

  /**
   * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.
   *
   * See also {@link GetWhoami}.
   */
  stampGetWhoami = async (input: TGetWhoamiBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/query/whoami";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Approve an Activity
   *
   * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).
   *
   * See also {@link stampApproveActivity}.
   */
  approveActivity = async (
    input: TApproveActivityBody,
  ): Promise<TApproveActivityResponse> => {
    return this.request("/public/v1/submit/approve_activity", input);
  };

  /**
   * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.
   *
   * See also {@link ApproveActivity}.
   */
  stampApproveActivity = async (
    input: TApproveActivityBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/approve_activity";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Add api keys to an existing User
   *
   * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).
   *
   * See also {@link stampCreateApiKeys}.
   */
  createApiKeys = async (
    input: TCreateApiKeysBody,
  ): Promise<TCreateApiKeysResponse> => {
    return this.request("/public/v1/submit/create_api_keys", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.
   *
   * See also {@link CreateApiKeys}.
   */
  stampCreateApiKeys = async (
    input: TCreateApiKeysBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_api_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create API-only Users in an existing Organization
   *
   * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).
   *
   * See also {@link stampCreateApiOnlyUsers}.
   */
  createApiOnlyUsers = async (
    input: TCreateApiOnlyUsersBody,
  ): Promise<TCreateApiOnlyUsersResponse> => {
    return this.request("/public/v1/submit/create_api_only_users", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.
   *
   * See also {@link CreateApiOnlyUsers}.
   */
  stampCreateApiOnlyUsers = async (
    input: TCreateApiOnlyUsersBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_api_only_users";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create Authenticators to authenticate requests to Turnkey
   *
   * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).
   *
   * See also {@link stampCreateAuthenticators}.
   */
  createAuthenticators = async (
    input: TCreateAuthenticatorsBody,
  ): Promise<TCreateAuthenticatorsResponse> => {
    return this.request("/public/v1/submit/create_authenticators", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.
   *
   * See also {@link CreateAuthenticators}.
   */
  stampCreateAuthenticators = async (
    input: TCreateAuthenticatorsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_authenticators";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create Invitations to join an existing Organization
   *
   * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).
   *
   * See also {@link stampCreateInvitations}.
   */
  createInvitations = async (
    input: TCreateInvitationsBody,
  ): Promise<TCreateInvitationsResponse> => {
    return this.request("/public/v1/submit/create_invitations", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.
   *
   * See also {@link CreateInvitations}.
   */
  stampCreateInvitations = async (
    input: TCreateInvitationsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_invitations";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Creates Oauth providers for a specified user - BETA
   *
   * Sign the provided `TCreateOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_oauth_providers).
   *
   * See also {@link stampCreateOauthProviders}.
   */
  createOauthProviders = async (
    input: TCreateOauthProvidersBody,
  ): Promise<TCreateOauthProvidersResponse> => {
    return this.request("/public/v1/submit/create_oauth_providers", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateOauthProvidersBody` by using the client's `stamp` function.
   *
   * See also {@link CreateOauthProviders}.
   */
  stampCreateOauthProviders = async (
    input: TCreateOauthProvidersBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_oauth_providers";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create new Policies
   *
   * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).
   *
   * See also {@link stampCreatePolicies}.
   */
  createPolicies = async (
    input: TCreatePoliciesBody,
  ): Promise<TCreatePoliciesResponse> => {
    return this.request("/public/v1/submit/create_policies", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.
   *
   * See also {@link CreatePolicies}.
   */
  stampCreatePolicies = async (
    input: TCreatePoliciesBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policies";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create a new Policy
   *
   * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).
   *
   * See also {@link stampCreatePolicy}.
   */
  createPolicy = async (
    input: TCreatePolicyBody,
  ): Promise<TCreatePolicyResponse> => {
    return this.request("/public/v1/submit/create_policy", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.
   *
   * See also {@link CreatePolicy}.
   */
  stampCreatePolicy = async (
    input: TCreatePolicyBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_policy";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create a private key tag and add it to private keys.
   *
   * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).
   *
   * See also {@link stampCreatePrivateKeyTag}.
   */
  createPrivateKeyTag = async (
    input: TCreatePrivateKeyTagBody,
  ): Promise<TCreatePrivateKeyTagResponse> => {
    return this.request("/public/v1/submit/create_private_key_tag", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.
   *
   * See also {@link CreatePrivateKeyTag}.
   */
  stampCreatePrivateKeyTag = async (
    input: TCreatePrivateKeyTagBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_private_key_tag";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create new Private Keys
   *
   * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).
   *
   * See also {@link stampCreatePrivateKeys}.
   */
  createPrivateKeys = async (
    input: TCreatePrivateKeysBody,
  ): Promise<TCreatePrivateKeysResponse> => {
    return this.request("/public/v1/submit/create_private_keys", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.
   *
   * See also {@link CreatePrivateKeys}.
   */
  stampCreatePrivateKeys = async (
    input: TCreatePrivateKeysBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_private_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create a read only session for a user (valid for 1 hour)
   *
   * Sign the provided `TCreateReadOnlySessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_only_session).
   *
   * See also {@link stampCreateReadOnlySession}.
   */
  createReadOnlySession = async (
    input: TCreateReadOnlySessionBody,
  ): Promise<TCreateReadOnlySessionResponse> => {
    return this.request("/public/v1/submit/create_read_only_session", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateReadOnlySessionBody` by using the client's `stamp` function.
   *
   * See also {@link CreateReadOnlySession}.
   */
  stampCreateReadOnlySession = async (
    input: TCreateReadOnlySessionBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_read_only_session";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create a read write session for a user
   *
   * Sign the provided `TCreateReadWriteSessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_write_session).
   *
   * See also {@link stampCreateReadWriteSession}.
   */
  createReadWriteSession = async (
    input: TCreateReadWriteSessionBody,
  ): Promise<TCreateReadWriteSessionResponse> => {
    return this.request("/public/v1/submit/create_read_write_session", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateReadWriteSessionBody` by using the client's `stamp` function.
   *
   * See also {@link CreateReadWriteSession}.
   */
  stampCreateReadWriteSession = async (
    input: TCreateReadWriteSessionBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_read_write_session";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create a new Sub-Organization
   *
   * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).
   *
   * See also {@link stampCreateSubOrganization}.
   */
  createSubOrganization = async (
    input: TCreateSubOrganizationBody,
  ): Promise<TCreateSubOrganizationResponse> => {
    return this.request("/public/v1/submit/create_sub_organization", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.
   *
   * See also {@link CreateSubOrganization}.
   */
  stampCreateSubOrganization = async (
    input: TCreateSubOrganizationBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_sub_organization";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create a user tag and add it to users.
   *
   * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).
   *
   * See also {@link stampCreateUserTag}.
   */
  createUserTag = async (
    input: TCreateUserTagBody,
  ): Promise<TCreateUserTagResponse> => {
    return this.request("/public/v1/submit/create_user_tag", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.
   *
   * See also {@link CreateUserTag}.
   */
  stampCreateUserTag = async (
    input: TCreateUserTagBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_user_tag";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create Users in an existing Organization
   *
   * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).
   *
   * See also {@link stampCreateUsers}.
   */
  createUsers = async (
    input: TCreateUsersBody,
  ): Promise<TCreateUsersResponse> => {
    return this.request("/public/v1/submit/create_users", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.
   *
   * See also {@link CreateUsers}.
   */
  stampCreateUsers = async (
    input: TCreateUsersBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_users";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Create a Wallet and derive addresses
   *
   * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).
   *
   * See also {@link stampCreateWallet}.
   */
  createWallet = async (
    input: TCreateWalletBody,
  ): Promise<TCreateWalletResponse> => {
    return this.request("/public/v1/submit/create_wallet", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.
   *
   * See also {@link CreateWallet}.
   */
  stampCreateWallet = async (
    input: TCreateWalletBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/create_wallet";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Derive additional addresses using an existing wallet
   *
   * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).
   *
   * See also {@link stampCreateWalletAccounts}.
   */
  createWalletAccounts = async (
    input: TCreateWalletAccountsBody,
  ): Promise<TCreateWalletAccountsResponse> => {
    return this.request("/public/v1/submit/create_wallet_accounts", input);
  };

  /**
   * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.
   *
   * See also {@link CreateWalletAccounts}.
   */
  stampCreateWalletAccounts = async (
    input: TCreateWalletAccountsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/create_wallet_accounts";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Remove api keys from a User
   *
   * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).
   *
   * See also {@link stampDeleteApiKeys}.
   */
  deleteApiKeys = async (
    input: TDeleteApiKeysBody,
  ): Promise<TDeleteApiKeysResponse> => {
    return this.request("/public/v1/submit/delete_api_keys", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteApiKeys}.
   */
  stampDeleteApiKeys = async (
    input: TDeleteApiKeysBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_api_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Remove authenticators from a User
   *
   * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).
   *
   * See also {@link stampDeleteAuthenticators}.
   */
  deleteAuthenticators = async (
    input: TDeleteAuthenticatorsBody,
  ): Promise<TDeleteAuthenticatorsResponse> => {
    return this.request("/public/v1/submit/delete_authenticators", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteAuthenticators}.
   */
  stampDeleteAuthenticators = async (
    input: TDeleteAuthenticatorsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/delete_authenticators";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Delete an existing Invitation
   *
   * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).
   *
   * See also {@link stampDeleteInvitation}.
   */
  deleteInvitation = async (
    input: TDeleteInvitationBody,
  ): Promise<TDeleteInvitationResponse> => {
    return this.request("/public/v1/submit/delete_invitation", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteInvitation}.
   */
  stampDeleteInvitation = async (
    input: TDeleteInvitationBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_invitation";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Removes Oauth providers for a specified user - BETA
   *
   * Sign the provided `TDeleteOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_oauth_providers).
   *
   * See also {@link stampDeleteOauthProviders}.
   */
  deleteOauthProviders = async (
    input: TDeleteOauthProvidersBody,
  ): Promise<TDeleteOauthProvidersResponse> => {
    return this.request("/public/v1/submit/delete_oauth_providers", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeleteOauthProvidersBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteOauthProviders}.
   */
  stampDeleteOauthProviders = async (
    input: TDeleteOauthProvidersBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/delete_oauth_providers";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Delete an existing Policy
   *
   * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).
   *
   * See also {@link stampDeletePolicy}.
   */
  deletePolicy = async (
    input: TDeletePolicyBody,
  ): Promise<TDeletePolicyResponse> => {
    return this.request("/public/v1/submit/delete_policy", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.
   *
   * See also {@link DeletePolicy}.
   */
  stampDeletePolicy = async (
    input: TDeletePolicyBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_policy";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Delete Private Key Tags within an Organization
   *
   * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).
   *
   * See also {@link stampDeletePrivateKeyTags}.
   */
  deletePrivateKeyTags = async (
    input: TDeletePrivateKeyTagsBody,
  ): Promise<TDeletePrivateKeyTagsResponse> => {
    return this.request("/public/v1/submit/delete_private_key_tags", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.
   *
   * See also {@link DeletePrivateKeyTags}.
   */
  stampDeletePrivateKeyTags = async (
    input: TDeletePrivateKeyTagsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/delete_private_key_tags";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Deletes private keys for an organization
   *
   * Sign the provided `TDeletePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_keys).
   *
   * See also {@link stampDeletePrivateKeys}.
   */
  deletePrivateKeys = async (
    input: TDeletePrivateKeysBody,
  ): Promise<TDeletePrivateKeysResponse> => {
    return this.request("/public/v1/submit/delete_private_keys", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeletePrivateKeysBody` by using the client's `stamp` function.
   *
   * See also {@link DeletePrivateKeys}.
   */
  stampDeletePrivateKeys = async (
    input: TDeletePrivateKeysBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/delete_private_keys";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Deletes a sub organization
   *
   * Sign the provided `TDeleteSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_sub_organization).
   *
   * See also {@link stampDeleteSubOrganization}.
   */
  deleteSubOrganization = async (
    input: TDeleteSubOrganizationBody,
  ): Promise<TDeleteSubOrganizationResponse> => {
    return this.request("/public/v1/submit/delete_sub_organization", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeleteSubOrganizationBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteSubOrganization}.
   */
  stampDeleteSubOrganization = async (
    input: TDeleteSubOrganizationBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/delete_sub_organization";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Delete User Tags within an Organization
   *
   * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).
   *
   * See also {@link stampDeleteUserTags}.
   */
  deleteUserTags = async (
    input: TDeleteUserTagsBody,
  ): Promise<TDeleteUserTagsResponse> => {
    return this.request("/public/v1/submit/delete_user_tags", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteUserTags}.
   */
  stampDeleteUserTags = async (
    input: TDeleteUserTagsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_user_tags";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Delete Users within an Organization
   *
   * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).
   *
   * See also {@link stampDeleteUsers}.
   */
  deleteUsers = async (
    input: TDeleteUsersBody,
  ): Promise<TDeleteUsersResponse> => {
    return this.request("/public/v1/submit/delete_users", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteUsers}.
   */
  stampDeleteUsers = async (
    input: TDeleteUsersBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_users";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Deletes wallets for an organization
   *
   * Sign the provided `TDeleteWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_wallets).
   *
   * See also {@link stampDeleteWallets}.
   */
  deleteWallets = async (
    input: TDeleteWalletsBody,
  ): Promise<TDeleteWalletsResponse> => {
    return this.request("/public/v1/submit/delete_wallets", input);
  };

  /**
   * Produce a `SignedRequest` from `TDeleteWalletsBody` by using the client's `stamp` function.
   *
   * See also {@link DeleteWallets}.
   */
  stampDeleteWallets = async (
    input: TDeleteWalletsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/delete_wallets";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Authenticate a user via Email
   *
   * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).
   *
   * See also {@link stampEmailAuth}.
   */
  emailAuth = async (input: TEmailAuthBody): Promise<TEmailAuthResponse> => {
    return this.request("/public/v1/submit/email_auth", input);
  };

  /**
   * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.
   *
   * See also {@link EmailAuth}.
   */
  stampEmailAuth = async (input: TEmailAuthBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/email_auth";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Exports a Private Key
   *
   * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).
   *
   * See also {@link stampExportPrivateKey}.
   */
  exportPrivateKey = async (
    input: TExportPrivateKeyBody,
  ): Promise<TExportPrivateKeyResponse> => {
    return this.request("/public/v1/submit/export_private_key", input);
  };

  /**
   * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.
   *
   * See also {@link ExportPrivateKey}.
   */
  stampExportPrivateKey = async (
    input: TExportPrivateKeyBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/export_private_key";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Exports a Wallet
   *
   * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).
   *
   * See also {@link stampExportWallet}.
   */
  exportWallet = async (
    input: TExportWalletBody,
  ): Promise<TExportWalletResponse> => {
    return this.request("/public/v1/submit/export_wallet", input);
  };

  /**
   * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.
   *
   * See also {@link ExportWallet}.
   */
  stampExportWallet = async (
    input: TExportWalletBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/export_wallet";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Exports a Wallet Account
   *
   * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).
   *
   * See also {@link stampExportWalletAccount}.
   */
  exportWalletAccount = async (
    input: TExportWalletAccountBody,
  ): Promise<TExportWalletAccountResponse> => {
    return this.request("/public/v1/submit/export_wallet_account", input);
  };

  /**
   * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.
   *
   * See also {@link ExportWalletAccount}.
   */
  stampExportWalletAccount = async (
    input: TExportWalletAccountBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/export_wallet_account";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Imports a private key
   *
   * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).
   *
   * See also {@link stampImportPrivateKey}.
   */
  importPrivateKey = async (
    input: TImportPrivateKeyBody,
  ): Promise<TImportPrivateKeyResponse> => {
    return this.request("/public/v1/submit/import_private_key", input);
  };

  /**
   * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.
   *
   * See also {@link ImportPrivateKey}.
   */
  stampImportPrivateKey = async (
    input: TImportPrivateKeyBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/import_private_key";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Imports a wallet
   *
   * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).
   *
   * See also {@link stampImportWallet}.
   */
  importWallet = async (
    input: TImportWalletBody,
  ): Promise<TImportWalletResponse> => {
    return this.request("/public/v1/submit/import_wallet", input);
  };

  /**
   * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.
   *
   * See also {@link ImportWallet}.
   */
  stampImportWallet = async (
    input: TImportWalletBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/import_wallet";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Initializes a new private key import
   *
   * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).
   *
   * See also {@link stampInitImportPrivateKey}.
   */
  initImportPrivateKey = async (
    input: TInitImportPrivateKeyBody,
  ): Promise<TInitImportPrivateKeyResponse> => {
    return this.request("/public/v1/submit/init_import_private_key", input);
  };

  /**
   * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.
   *
   * See also {@link InitImportPrivateKey}.
   */
  stampInitImportPrivateKey = async (
    input: TInitImportPrivateKeyBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/init_import_private_key";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Initializes a new wallet import
   *
   * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).
   *
   * See also {@link stampInitImportWallet}.
   */
  initImportWallet = async (
    input: TInitImportWalletBody,
  ): Promise<TInitImportWalletResponse> => {
    return this.request("/public/v1/submit/init_import_wallet", input);
  };

  /**
   * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.
   *
   * See also {@link InitImportWallet}.
   */
  stampInitImportWallet = async (
    input: TInitImportWalletBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/init_import_wallet";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Initiate an OTP auth activity
   *
   * Sign the provided `TInitOtpAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_otp_auth).
   *
   * See also {@link stampInitOtpAuth}.
   */
  initOtpAuth = async (
    input: TInitOtpAuthBody,
  ): Promise<TInitOtpAuthResponse> => {
    return this.request("/public/v1/submit/init_otp_auth", input);
  };

  /**
   * Produce a `SignedRequest` from `TInitOtpAuthBody` by using the client's `stamp` function.
   *
   * See also {@link InitOtpAuth}.
   */
  stampInitOtpAuth = async (
    input: TInitOtpAuthBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/init_otp_auth";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Initializes a new email recovery
   *
   * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).
   *
   * See also {@link stampInitUserEmailRecovery}.
   */
  initUserEmailRecovery = async (
    input: TInitUserEmailRecoveryBody,
  ): Promise<TInitUserEmailRecoveryResponse> => {
    return this.request("/public/v1/submit/init_user_email_recovery", input);
  };

  /**
   * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.
   *
   * See also {@link InitUserEmailRecovery}.
   */
  stampInitUserEmailRecovery = async (
    input: TInitUserEmailRecoveryBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/init_user_email_recovery";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Authenticate a user with an Oidc token (Oauth) - BETA
   *
   * Sign the provided `TOauthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth).
   *
   * See also {@link stampOauth}.
   */
  oauth = async (input: TOauthBody): Promise<TOauthResponse> => {
    return this.request("/public/v1/submit/oauth", input);
  };

  /**
   * Produce a `SignedRequest` from `TOauthBody` by using the client's `stamp` function.
   *
   * See also {@link Oauth}.
   */
  stampOauth = async (input: TOauthBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/oauth";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Authenticate a user with an OTP code sent via email or SMS
   *
   * Sign the provided `TOtpAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/otp_auth).
   *
   * See also {@link stampOtpAuth}.
   */
  otpAuth = async (input: TOtpAuthBody): Promise<TOtpAuthResponse> => {
    return this.request("/public/v1/submit/otp_auth", input);
  };

  /**
   * Produce a `SignedRequest` from `TOtpAuthBody` by using the client's `stamp` function.
   *
   * See also {@link OtpAuth}.
   */
  stampOtpAuth = async (input: TOtpAuthBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/otp_auth";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Completes the process of recovering a user by adding an authenticator
   *
   * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).
   *
   * See also {@link stampRecoverUser}.
   */
  recoverUser = async (
    input: TRecoverUserBody,
  ): Promise<TRecoverUserResponse> => {
    return this.request("/public/v1/submit/recover_user", input);
  };

  /**
   * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.
   *
   * See also {@link RecoverUser}.
   */
  stampRecoverUser = async (
    input: TRecoverUserBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/recover_user";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Reject an Activity
   *
   * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).
   *
   * See also {@link stampRejectActivity}.
   */
  rejectActivity = async (
    input: TRejectActivityBody,
  ): Promise<TRejectActivityResponse> => {
    return this.request("/public/v1/submit/reject_activity", input);
  };

  /**
   * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.
   *
   * See also {@link RejectActivity}.
   */
  stampRejectActivity = async (
    input: TRejectActivityBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/reject_activity";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Removes an organization feature. This activity must be approved by the current root quorum.
   *
   * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).
   *
   * See also {@link stampRemoveOrganizationFeature}.
   */
  removeOrganizationFeature = async (
    input: TRemoveOrganizationFeatureBody,
  ): Promise<TRemoveOrganizationFeatureResponse> => {
    return this.request("/public/v1/submit/remove_organization_feature", input);
  };

  /**
   * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.
   *
   * See also {@link RemoveOrganizationFeature}.
   */
  stampRemoveOrganizationFeature = async (
    input: TRemoveOrganizationFeatureBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/remove_organization_feature";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Sets an organization feature. This activity must be approved by the current root quorum.
   *
   * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).
   *
   * See also {@link stampSetOrganizationFeature}.
   */
  setOrganizationFeature = async (
    input: TSetOrganizationFeatureBody,
  ): Promise<TSetOrganizationFeatureResponse> => {
    return this.request("/public/v1/submit/set_organization_feature", input);
  };

  /**
   * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.
   *
   * See also {@link SetOrganizationFeature}.
   */
  stampSetOrganizationFeature = async (
    input: TSetOrganizationFeatureBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/set_organization_feature";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Sign a raw payload
   *
   * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).
   *
   * See also {@link stampSignRawPayload}.
   */
  signRawPayload = async (
    input: TSignRawPayloadBody,
  ): Promise<TSignRawPayloadResponse> => {
    return this.request("/public/v1/submit/sign_raw_payload", input);
  };

  /**
   * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.
   *
   * See also {@link SignRawPayload}.
   */
  stampSignRawPayload = async (
    input: TSignRawPayloadBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payload";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Sign multiple raw payloads with the same signing parameters
   *
   * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).
   *
   * See also {@link stampSignRawPayloads}.
   */
  signRawPayloads = async (
    input: TSignRawPayloadsBody,
  ): Promise<TSignRawPayloadsResponse> => {
    return this.request("/public/v1/submit/sign_raw_payloads", input);
  };

  /**
   * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.
   *
   * See also {@link SignRawPayloads}.
   */
  stampSignRawPayloads = async (
    input: TSignRawPayloadsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_raw_payloads";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Sign a transaction
   *
   * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).
   *
   * See also {@link stampSignTransaction}.
   */
  signTransaction = async (
    input: TSignTransactionBody,
  ): Promise<TSignTransactionResponse> => {
    return this.request("/public/v1/submit/sign_transaction", input);
  };

  /**
   * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.
   *
   * See also {@link SignTransaction}.
   */
  stampSignTransaction = async (
    input: TSignTransactionBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/sign_transaction";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Update an existing Policy
   *
   * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).
   *
   * See also {@link stampUpdatePolicy}.
   */
  updatePolicy = async (
    input: TUpdatePolicyBody,
  ): Promise<TUpdatePolicyResponse> => {
    return this.request("/public/v1/submit/update_policy", input);
  };

  /**
   * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.
   *
   * See also {@link UpdatePolicy}.
   */
  stampUpdatePolicy = async (
    input: TUpdatePolicyBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/update_policy";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
   *
   * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).
   *
   * See also {@link stampUpdatePrivateKeyTag}.
   */
  updatePrivateKeyTag = async (
    input: TUpdatePrivateKeyTagBody,
  ): Promise<TUpdatePrivateKeyTagResponse> => {
    return this.request("/public/v1/submit/update_private_key_tag", input);
  };

  /**
   * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.
   *
   * See also {@link UpdatePrivateKeyTag}.
   */
  stampUpdatePrivateKeyTag = async (
    input: TUpdatePrivateKeyTagBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/update_private_key_tag";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.
   *
   * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).
   *
   * See also {@link stampUpdateRootQuorum}.
   */
  updateRootQuorum = async (
    input: TUpdateRootQuorumBody,
  ): Promise<TUpdateRootQuorumResponse> => {
    return this.request("/public/v1/submit/update_root_quorum", input);
  };

  /**
   * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.
   *
   * See also {@link UpdateRootQuorum}.
   */
  stampUpdateRootQuorum = async (
    input: TUpdateRootQuorumBody,
  ): Promise<TSignedRequest> => {
    const fullUrl =
      this.config.baseUrl + "/public/v1/submit/update_root_quorum";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Update a User in an existing Organization
   *
   * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).
   *
   * See also {@link stampUpdateUser}.
   */
  updateUser = async (input: TUpdateUserBody): Promise<TUpdateUserResponse> => {
    return this.request("/public/v1/submit/update_user", input);
  };

  /**
   * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.
   *
   * See also {@link UpdateUser}.
   */
  stampUpdateUser = async (input: TUpdateUserBody): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
   *
   * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).
   *
   * See also {@link stampUpdateUserTag}.
   */
  updateUserTag = async (
    input: TUpdateUserTagBody,
  ): Promise<TUpdateUserTagResponse> => {
    return this.request("/public/v1/submit/update_user_tag", input);
  };

  /**
   * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.
   *
   * See also {@link UpdateUserTag}.
   */
  stampUpdateUserTag = async (
    input: TUpdateUserTagBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/update_user_tag";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Update a wallet for an organization
   *
   * Sign the provided `TUpdateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_wallet).
   *
   * See also {@link stampUpdateWallet}.
   */
  updateWallet = async (
    input: TUpdateWalletBody,
  ): Promise<TUpdateWalletResponse> => {
    return this.request("/public/v1/submit/update_wallet", input);
  };

  /**
   * Produce a `SignedRequest` from `TUpdateWalletBody` by using the client's `stamp` function.
   *
   * See also {@link UpdateWallet}.
   */
  stampUpdateWallet = async (
    input: TUpdateWalletBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/public/v1/submit/update_wallet";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };

  /**
   * Set a rate local rate limit just on the current endpoint, for purposes of testing with Vivosuite
   *
   * Sign the provided `TTestRateLimitsBody` with the client's `stamp` function, and submit the request (POST /tkhq/api/v1/test_rate_limits).
   *
   * See also {@link stampTestRateLimits}.
   */
  testRateLimits = async (
    input: TTestRateLimitsBody,
  ): Promise<TTestRateLimitsResponse> => {
    return this.request("/tkhq/api/v1/test_rate_limits", input);
  };

  /**
   * Produce a `SignedRequest` from `TTestRateLimitsBody` by using the client's `stamp` function.
   *
   * See also {@link TestRateLimits}.
   */
  stampTestRateLimits = async (
    input: TTestRateLimitsBody,
  ): Promise<TSignedRequest> => {
    const fullUrl = this.config.baseUrl + "/tkhq/api/v1/test_rate_limits";
    const body = JSON.stringify(input);
    const stamp = await this.stamper.stamp(body);
    return {
      body: body,
      stamp: stamp,
      url: fullUrl,
    };
  };
}
